[{"path":"https://kaiaragaki.github.io/qp/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 qp authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://kaiaragaki.github.io/qp/articles/quantifying-protein-with-qp.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Quantifying protein with qp","text":"Micro BCA assay analysis easy straightforward. lab work, though, analysis typically repetitive. can analyze data programmatically speed automate analysis, remove human error, get reproducibility free along way. qp intends -fuss enough analyze routine runs flexible enough make analyzing hairier ones simple enough. vignette, ’ll start straightforward data set move challenging one show two different approaches analyzing protein quantification data using qp.","code":"library(qp)"},{"path":"https://kaiaragaki.github.io/qp/articles/quantifying-protein-with-qp.html","id":"routine-analysis","dir":"Articles","previous_headings":"","what":"Routine analysis","title":"Quantifying protein with qp","text":"standard qp workflow based protocol. Provided protocol followed, relatively parameters need changed default. easiest - common - way read data providing path SPECTRAmax file output. .txt files …creatively…formatted files ’ve come across. Fortunately, ’ve developed little package mop reads lab data like . used qp function provide character string. Typically perform experiments, know laid . data ’m providing, though, ’ll need show ’s laid can follow along set parameters way . plate looks:  samples laid triplicate, horizontally arranged replicates vertical bands wrap next three columns hits edge plate.  Furthermore, seven standards top left corner plate, ascending concentrations flow first column. samples follow. rest wells empty:  Since followed standard protocol, since told replicates arranged horizontally, analysis breeze: can plot standards samples simply, using qp_plot_standards:  can get summary concentrations using qp_summarize: can also calculate dilutions summary. default, use lowest concentration samples final volume 15uL:","code":"f <- system.file(\"extdata\", \"absorbances.txt\", package = \"qp\")  readLines(f) #>  [1] \"##BLOCKS= 2          \"                                                                                             #>  [2] \"Plate:\\tPlate#1\\t1.3\\tPlateFormat\\tEndpoint\\tAbsorbance\\tRaw\\tFALSE\\t1\\t\\t\\t\\t\\t\\t1\\t562\\t1\\t12\\t96\\t1\\t8\\tNone\\t\" #>  [3] \"\\tTemperature(\\xa1C)\\t1\\t2\\t3\\t4\\t5\\t6\\t7\\t8\\t9\\t10\\t11\\t12\\t\\t\"                                                   #>  [4] \"\\t37.00\\t0.0686\\t0.0717\\t0.0698\\t0.2415\\t0.228\\t0.2273\\t0.0475\\t0.0459\\t0.0485\\t0.0487\\t0.0474\\t0.0464\\t\\t\"        #>  [5] \"\\t\\t0.0825\\t0.0832\\t0.0835\\t0.183\\t0.1856\\t0.1753\\t0.0487\\t0.0464\\t0.048\\t0.0465\\t0.0468\\t0.047\\t\\t\"               #>  [6] \"\\t\\t0.1023\\t0.1004\\t0.1017\\t0.2175\\t0.2137\\t0.2168\\t0.0475\\t0.0471\\t0.0475\\t0.047\\t0.0474\\t0.0472\\t\\t\"             #>  [7] \"\\t\\t0.1322\\t0.1324\\t0.1371\\t0.1241\\t0.1248\\t0.1213\\t0.0482\\t0.0475\\t0.0476\\t0.0477\\t0.0474\\t0.0479\\t\\t\"            #>  [8] \"\\t\\t0.1955\\t0.199\\t0.1938\\t0.0478\\t0.0455\\t0.0508\\t0.046\\t0.0465\\t0.0479\\t0.0512\\t0.0477\\t0.0465\\t\\t\"              #>  [9] \"\\t\\t0.2963\\t0.2878\\t0.2974\\t0.046\\t0.0467\\t0.0462\\t0.0465\\t0.0477\\t0.0455\\t0.0456\\t0.0467\\t0.046\\t\\t\"              #> [10] \"\\t\\t0.4599\\t0.4662\\t0.4779\\t0.0472\\t0.0455\\t0.0464\\t0.0473\\t0.0464\\t0.0493\\t0.0451\\t0.0463\\t0.0466\\t\\t\"            #> [11] \"\\t\\t0.2617\\t0.2524\\t0.2584\\t0.0461\\t0.0463\\t0.0469\\t0.0448\\t0.0465\\t0.0464\\t0.0477\\t0.0472\\t0.0457\\t\\t\"            #> [12] \"\\t\\t\"                                                                                                              #> [13] \"~End\"                                                                                                              #> [14] \"Original Filename: Untitled   Date Last Saved: Unsaved\"                                                            #> [15] \"Copyright \\xa9 2003 Molecular Devices. All rights reserved.\" out <- qp(f, replicate_orientation = \"h\") qp_plot_standards(out) summary <- qp_summarize(out) summary #> # A tibble: 12 × 3 #>    .sample_name sample_type .pred_conc_mean #>    <chr>        <fct>                 <dbl> #>  1 Standard 1   standard           -0.00623 #>  2 Standard 2   standard            0.102   #>  3 Standard 3   standard            0.258   #>  4 Standard 4   standard            0.520   #>  5 Standard 5   standard            1.08    #>  6 Standard 6   standard            2.06    #>  7 Standard 7   standard            3.76    #>  8 1            unknown             1.71    #>  9 2            unknown             1.39    #> 10 3            unknown             0.989   #> 11 4            unknown             1.30    #> 12 5            unknown             0.451 summary |> qp_dilute() #> `target_conc` is missing, using lowest sample concentration #> # A tibble: 12 × 7 #>    .sample_name sample_type .pred_conc_mean sample_to_add  add_to .target_conc #>    <chr>        <fct>                 <dbl>         <dbl>   <dbl>        <dbl> #>  1 Standard 1   standard           -0.00623      -1088    1103           0.451 #>  2 Standard 2   standard            0.102           66.2   -51.2         0.451 #>  3 Standard 3   standard            0.258           26.2   -11.2         0.451 #>  4 Standard 4   standard            0.520           13.0     1.98        0.451 #>  5 Standard 5   standard            1.08             6.24    8.76        0.451 #>  6 Standard 6   standard            2.06             3.28   11.7         0.451 #>  7 Standard 7   standard            3.76             1.8    13.2         0.451 #>  8 1            unknown             1.71             3.97   11.0         0.451 #>  9 2            unknown             1.39             4.85   10.1         0.451 #> 10 3            unknown             0.989            6.85    8.15        0.451 #> 11 4            unknown             1.30             5.23    9.77        0.451 #> 12 5            unknown             0.451           15       0           0.451 #> # ℹ 1 more variable: .target_vol <dbl>"},{"path":"https://kaiaragaki.github.io/qp/articles/quantifying-protein-with-qp.html","id":"when-things-go-wrong","dir":"Articles","previous_headings":"","what":"When things go wrong","title":"Quantifying protein with qp","text":"Occasionally, experiment won’t go perfectly - maybe mixed order standards, can’t run samples technical replicates. case, can run functions qp runs individually, maybe little data munging steps. functions depend previous function run. See following hierarchy see functions depend :","code":""},{"path":"https://kaiaragaki.github.io/qp/articles/quantifying-protein-with-qp.html","id":"reading-in-the-data","dir":"Articles","previous_headings":"When things go wrong","what":"Reading in the data","title":"Quantifying protein with qp","text":"couple ways going . Depending borked plate , straightforward way may create data.frame columns sample_type (contain standard unknown), index (denotes standard sample number), .abs (absorbances - hopefully necessarily - 562nm): Admittedly, destroy whole ‘reproducibility’ aspect . Another way going via gplate can extract gp spectramax object via: can carve rectangular sections using gplate::gp_excise:","code":"standards <- data.frame(   sample_type = \"standard\",   index = rep(1:7, each = 2),   abs = c(0.071, 0.079, 0.08, 0.082,           0.1, 0.099, 0.15, 0.147,           0.22, 0.215, 0.50, 0.48, 0.78, 0.79)) unknowns <- data.frame(sample_type = \"unknown\", index = 1, abs = 0.25) data <- rbind(standards, unknowns) data #>    sample_type index   abs #> 1     standard     1 0.071 #> 2     standard     1 0.079 #> 3     standard     2 0.080 #> 4     standard     2 0.082 #> 5     standard     3 0.100 #> 6     standard     3 0.099 #> 7     standard     4 0.150 #> 8     standard     4 0.147 #> 9     standard     5 0.220 #> 10    standard     5 0.215 #> 11    standard     6 0.500 #> 12    standard     6 0.480 #> 13    standard     7 0.780 #> 14    standard     7 0.790 #> 15     unknown     1 0.250 library(mop) f <- system.file(\"extdata\", \"absorbances.txt\", package = \"qp\") spectramax <- read_spectramax(f) spectramax #> <spectramax[4]> #> [[1]] #> [[1]]$data #>  #>                 12 #>    ________________________ #>   | ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ #>   | ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ #>   | ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ #>   | ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ #> 8 | ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ #>   | ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ #>   | ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ #>   | ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ #>  #>  #> Start corner: tl #> Plate dimensions: 8 x 12 #>  #> [[1]]$type #> [1] \"Plate\" #>  #> [[1]]$wavelengths #> [1] \"562\" #>  #>  #> # Date: 2025-07-31 # I know it's ugly syntax - I'll work on it. Later. gp <- spectramax$data[[1]]$data gp #>  #>                 12 #>    ________________________ #>   | ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ #>   | ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ #>   | ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ #>   | ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ #> 8 | ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ #>   | ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ #>   | ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ #>   | ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ #>  #>  #> Start corner: tl #> Plate dimensions: 8 x 12 library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union library(gplate) standards <- gp |>   gp_excise(top = 1, left = 1, bottom = 7, right = 2) |>   gp_serve() |>   mutate(     sample_type = \"standard\",     index = rep(1:7, each = 2)   )  samples <- gp |>   gp_excise(top = 1, left = 4, bottom = 1, right = 4) |>   gp_serve() |>   mutate(     sample_type = \"unknown\",     index = 1   )    data <- rbind(standards, samples) |>   rename(.abs = nm562)  data #> # A tibble: 15 × 5 #>     .row  .col   .abs sample_type index #>    <int> <int>  <dbl> <chr>       <dbl> #>  1     1     1 0.0686 standard        1 #>  2     1     2 0.0717 standard        1 #>  3     2     1 0.0825 standard        2 #>  4     2     2 0.0832 standard        2 #>  5     3     1 0.102  standard        3 #>  6     3     2 0.100  standard        3 #>  7     4     1 0.132  standard        4 #>  8     4     2 0.132  standard        4 #>  9     5     1 0.196  standard        5 #> 10     5     2 0.199  standard        5 #> 11     6     1 0.296  standard        6 #> 12     6     2 0.288  standard        6 #> 13     7     1 0.460  standard        7 #> 14     7     2 0.466  standard        7 #> 15     1     1 0.242  unknown         1"},{"path":"https://kaiaragaki.github.io/qp/articles/quantifying-protein-with-qp.html","id":"adding-standard-concentrations","dir":"Articles","previous_headings":"When things go wrong","what":"Adding standard concentrations","title":"Quantifying protein with qp","text":"Suppose accidentally made highest standard twice concentrated. ’s simple fix. Instead using standard standards: can set : use argument qp_add_std_conc: can specify strangely want:","code":"c(0, 2^((2:7) - 5)) #> [1] 0.000 0.125 0.250 0.500 1.000 2.000 4.000 c(0, 2^((2:6) - 5), 8) #> [1] 0.000 0.125 0.250 0.500 1.000 2.000 8.000 qp_add_std_conc(data, c(0, 2^((2:6) - 5), 8)) #> # A tibble: 15 × 6 #>     .row  .col   .abs sample_type index  .conc #>    <int> <int>  <dbl> <chr>       <dbl>  <dbl> #>  1     1     1 0.0686 standard        1  0     #>  2     1     2 0.0717 standard        1  0     #>  3     2     1 0.0825 standard        2  0.125 #>  4     2     2 0.0832 standard        2  0.125 #>  5     3     1 0.102  standard        3  0.25  #>  6     3     2 0.100  standard        3  0.25  #>  7     4     1 0.132  standard        4  0.5   #>  8     4     2 0.132  standard        4  0.5   #>  9     5     1 0.196  standard        5  1     #> 10     5     2 0.199  standard        5  1     #> 11     6     1 0.296  standard        6  2     #> 12     6     2 0.288  standard        6  2     #> 13     7     1 0.460  standard        7  8     #> 14     7     2 0.466  standard        7  8     #> 15     1     1 0.242  unknown         1 NA qp_add_std_conc(data, c(1, 7, 26, 0.4, 2, 1, 1)) #> # A tibble: 15 × 6 #>     .row  .col   .abs sample_type index .conc #>    <int> <int>  <dbl> <chr>       <dbl> <dbl> #>  1     1     1 0.0686 standard        1   1   #>  2     1     2 0.0717 standard        1   1   #>  3     2     1 0.0825 standard        2   7   #>  4     2     2 0.0832 standard        2   7   #>  5     3     1 0.102  standard        3  26   #>  6     3     2 0.100  standard        3  26   #>  7     4     1 0.132  standard        4   0.4 #>  8     4     2 0.132  standard        4   0.4 #>  9     5     1 0.196  standard        5   2   #> 10     5     2 0.199  standard        5   2   #> 11     6     1 0.296  standard        6   1   #> 12     6     2 0.288  standard        6   1   #> 13     7     1 0.460  standard        7   1   #> 14     7     2 0.466  standard        7   1   #> 15     1     1 0.242  unknown         1  NA"},{"path":"https://kaiaragaki.github.io/qp/articles/quantifying-protein-with-qp.html","id":"calculating-absorbance-means","dir":"Articles","previous_headings":"When things go wrong","what":"Calculating absorbance means","title":"Quantifying protein with qp","text":"point - either calculating standard concentrations - ’ll need calculate means absorbances. Excel based format, might manually remove outliers - counts ‘outlier’ somewhat arbitrary setting. can optionally remove outliers systematic way qp: Something outlier 3 standard deviations away mean others. might mark things outliers might (perhaps two samples just ultra close ), downstream effect outliers truly much different others.","code":"some_abs <- absorbances[c(1:5, 21:26),] some_abs |>    qp_calc_abs_mean(ignore_outliers = \"none\") #> # A tibble: 11 × 7 #>     .row  .col   .abs sample_type index .is_outlier  .mean #>    <int> <dbl>  <dbl> <fct>       <dbl> <lgl>        <dbl> #>  1     1     1 0.0707 standard        1 NA          0.0736 #>  2     2     1 0.0786 standard        1 NA          0.0736 #>  3     3     1 0.0714 standard        1 NA          0.0736 #>  4     1     2 0.0795 standard        2 NA          0.0797 #>  5     2     2 0.0799 standard        2 NA          0.0797 #>  6     3     7 0.792  standard        7 NA          0.792  #>  7     1     8 0.456  unknown         1 NA          0.457  #>  8     2     8 0.459  unknown         1 NA          0.457  #>  9     3     8 0.455  unknown         1 NA          0.457  #> 10     1     9 0.446  unknown         2 NA          0.444  #> 11     2     9 0.441  unknown         2 NA          0.444 some_abs |>    qp_calc_abs_mean(ignore_outliers = \"standards\") #> # A tibble: 11 × 7 #>     .row  .col   .abs sample_type index .is_outlier  .mean #>    <int> <dbl>  <dbl> <fct>       <dbl> <lgl>        <dbl> #>  1     1     1 0.0707 standard        1 FALSE       0.0710 #>  2     2     1 0.0786 standard        1 TRUE        0.0710 #>  3     3     1 0.0714 standard        1 FALSE       0.0710 #>  4     1     2 0.0795 standard        2 FALSE       0.0797 #>  5     2     2 0.0799 standard        2 FALSE       0.0797 #>  6     3     7 0.792  standard        7 FALSE       0.792  #>  7     1     8 0.456  unknown         1 NA          0.457  #>  8     2     8 0.459  unknown         1 NA          0.457  #>  9     3     8 0.455  unknown         1 NA          0.457  #> 10     1     9 0.446  unknown         2 NA          0.444  #> 11     2     9 0.441  unknown         2 NA          0.444 some_abs |>    qp_calc_abs_mean(ignore_outliers = \"samples\") #> # A tibble: 11 × 7 #>     .row  .col   .abs sample_type index .is_outlier  .mean #>    <int> <dbl>  <dbl> <fct>       <dbl> <lgl>        <dbl> #>  1     1     1 0.0707 standard        1 NA          0.0736 #>  2     2     1 0.0786 standard        1 NA          0.0736 #>  3     3     1 0.0714 standard        1 NA          0.0736 #>  4     1     2 0.0795 standard        2 NA          0.0797 #>  5     2     2 0.0799 standard        2 NA          0.0797 #>  6     3     7 0.792  standard        7 NA          0.792  #>  7     1     8 0.456  unknown         1 FALSE       0.455  #>  8     2     8 0.459  unknown         1 TRUE        0.455  #>  9     3     8 0.455  unknown         1 FALSE       0.455  #> 10     1     9 0.446  unknown         2 FALSE       0.444  #> 11     2     9 0.441  unknown         2 FALSE       0.444 some_abs |>    qp_calc_abs_mean(ignore_outliers = \"all\") #> # A tibble: 11 × 7 #>     .row  .col   .abs sample_type index .is_outlier  .mean #>    <int> <dbl>  <dbl> <fct>       <dbl> <lgl>        <dbl> #>  1     1     1 0.0707 standard        1 FALSE       0.0710 #>  2     2     1 0.0786 standard        1 TRUE        0.0710 #>  3     3     1 0.0714 standard        1 FALSE       0.0710 #>  4     1     2 0.0795 standard        2 FALSE       0.0797 #>  5     2     2 0.0799 standard        2 FALSE       0.0797 #>  6     3     7 0.792  standard        7 FALSE       0.792  #>  7     1     8 0.456  unknown         1 FALSE       0.455  #>  8     2     8 0.459  unknown         1 TRUE        0.455  #>  9     3     8 0.455  unknown         1 FALSE       0.455  #> 10     1     9 0.446  unknown         2 FALSE       0.444  #> 11     2     9 0.441  unknown         2 FALSE       0.444"},{"path":"https://kaiaragaki.github.io/qp/articles/quantifying-protein-with-qp.html","id":"fitting-a-model","dir":"Articles","previous_headings":"When things go wrong","what":"Fitting a model","title":"Quantifying protein with qp","text":"steps completed, can fit simple linear model:","code":"out <- absorbances |>   qp_add_std_conc() |> # all values are defaults   qp_calc_abs_mean() |>   qp_fit() #> Warning: `sample_type` contains values other than `standard` and `unknown` #> ! These values may be ignored downstream! #> Did not find column `.log2_abs`, calculating.  out #> $fit #>  #> Call: #> stats::lm(formula = .log2_conc ~ .log2_abs, data = fit_data) #>  #> Coefficients: #> (Intercept)    .log2_abs   #>       2.378        0.850   #>  #>  #> $qp #> # A tibble: 88 × 9 #>     .row  .col   .abs sample_type index .conc .is_outlier  .mean .log2_abs #>    <int> <dbl>  <dbl> <fct>       <dbl> <dbl> <lgl>        <dbl>     <dbl> #>  1     1     1 0.0707 standard        1 0     FALSE       0.0710     -3.82 #>  2     2     1 0.0786 standard        1 0     TRUE        0.0710     -3.67 #>  3     3     1 0.0714 standard        1 0     FALSE       0.0710     -3.81 #>  4     1     2 0.0795 standard        2 0.125 FALSE       0.0800     -3.65 #>  5     2     2 0.0799 standard        2 0.125 FALSE       0.0800     -3.65 #>  6     3     2 0.0805 standard        2 0.125 FALSE       0.0800     -3.63 #>  7     1     3 0.0999 standard        3 0.25  FALSE       0.0977     -3.32 #>  8     2     3 0.0955 standard        3 0.25  FALSE       0.0977     -3.39 #>  9     3     3 0.0976 standard        3 0.25  FALSE       0.0977     -3.36 #> 10     1     4 0.151  standard        4 0.5   TRUE        0.148      -2.72 #> # ℹ 78 more rows"},{"path":"https://kaiaragaki.github.io/qp/articles/quantifying-protein-with-qp.html","id":"predicting-concentrations","dir":"Articles","previous_headings":"When things go wrong","what":"Predicting concentrations","title":"Quantifying protein with qp","text":"","code":"conc <- qp_calc_conc(out) conc #> $fit #>  #> Call: #> stats::lm(formula = .log2_conc ~ .log2_abs, data = fit_data) #>  #> Coefficients: #> (Intercept)    .log2_abs   #>       2.378        0.850   #>  #>  #> $qp #> # A tibble: 88 × 12 #>     .row  .col   .abs sample_type index .conc .is_outlier  .mean .log2_abs #>    <int> <dbl>  <dbl> <fct>       <dbl> <dbl> <lgl>        <dbl>     <dbl> #>  1     1     1 0.0707 standard        1 0     FALSE       0.0710     -3.82 #>  2     2     1 0.0786 standard        1 0     TRUE        0.0710     -3.67 #>  3     3     1 0.0714 standard        1 0     FALSE       0.0710     -3.81 #>  4     1     2 0.0795 standard        2 0.125 FALSE       0.0800     -3.65 #>  5     2     2 0.0799 standard        2 0.125 FALSE       0.0800     -3.65 #>  6     3     2 0.0805 standard        2 0.125 FALSE       0.0800     -3.63 #>  7     1     3 0.0999 standard        3 0.25  FALSE       0.0977     -3.32 #>  8     2     3 0.0955 standard        3 0.25  FALSE       0.0977     -3.39 #>  9     3     3 0.0976 standard        3 0.25  FALSE       0.0977     -3.36 #> 10     1     4 0.151  standard        4 0.5   TRUE        0.148      -2.72 #> # ℹ 78 more rows #> # ℹ 3 more variables: .pred <dbl>, .pred_conc <dbl>, .pred_conc_mean <dbl>"},{"path":"https://kaiaragaki.github.io/qp/articles/quantifying-protein-with-qp.html","id":"removing-empty-wells","dir":"Articles","previous_headings":"When things go wrong","what":"Removing empty wells","title":"Quantifying protein with qp","text":"Samples predicted concentration lower 0 can removed easily using qp_remove_empty: Note typically won’t remove wells BCA solution sample.","code":"conc$qp |> tail() #> # A tibble: 6 × 12 #>    .row  .col   .abs sample_type index .conc .is_outlier  .mean .log2_abs .pred #>   <int> <dbl>  <dbl> <fct>       <dbl> <dbl> <lgl>        <dbl>     <dbl> <dbl> #> 1     7     6 0.048  unknown        NA    NA FALSE       0.0485     -4.38 -1.35 #> 2     8     6 0.0469 unknown        NA    NA FALSE       0.0485     -4.41 -1.37 #> 3     7     7 0.0499 unknown        NA    NA FALSE       0.0485     -4.32 -1.30 #> 4     8     7 0.0483 unknown        NA    NA FALSE       0.0485     -4.37 -1.34 #> 5     7     8 0.0485 unknown        NA    NA FALSE       0.0485     -4.37 -1.33 #> 6     8     8 0.0487 unknown        NA    NA FALSE       0.0485     -4.36 -1.33 #> # ℹ 2 more variables: .pred_conc <dbl>, .pred_conc_mean <dbl> no_zero <- qp_remove_empty(conc) no_zero$qp |> tail() #> # A tibble: 6 × 12 #>    .row  .col  .abs sample_type index .conc .is_outlier .mean .log2_abs .pred #>   <int> <dbl> <dbl> <fct>       <dbl> <dbl> <lgl>       <dbl>     <dbl> <dbl> #> 1     4     2 0.379 unknown         7    NA FALSE       0.378     -1.40 1.19  #> 2     5     2 0.370 unknown         7    NA TRUE        0.378     -1.44 1.16  #> 3     6     2 0.376 unknown         7    NA FALSE       0.378     -1.41 1.18  #> 4     4     3 0.228 unknown         8    NA TRUE        0.218     -2.13 0.565 #> 5     5     3 0.217 unknown         8    NA FALSE       0.218     -2.20 0.504 #> 6     6     3 0.220 unknown         8    NA FALSE       0.218     -2.19 0.520 #> # ℹ 2 more variables: .pred_conc <dbl>, .pred_conc_mean <dbl>"},{"path":"https://kaiaragaki.github.io/qp/articles/quantifying-protein-with-qp.html","id":"adding-sample-names","dir":"Articles","previous_headings":"When things go wrong","what":"Adding sample names","title":"Quantifying protein with qp","text":"point, can add sample names data - index gets sample name.","code":"with_names <- no_zero |> qp_add_names(paste0(\"my_sample_\", letters[1:8])) with_names$qp |> tail() #> # A tibble: 6 × 13 #>    .row  .col  .abs sample_type index .conc .is_outlier .mean .log2_abs .pred #>   <int> <dbl> <dbl> <fct>       <dbl> <dbl> <lgl>       <dbl>     <dbl> <dbl> #> 1     4     2 0.379 unknown         7    NA FALSE       0.378     -1.40 1.19  #> 2     5     2 0.370 unknown         7    NA TRUE        0.378     -1.44 1.16  #> 3     6     2 0.376 unknown         7    NA FALSE       0.378     -1.41 1.18  #> 4     4     3 0.228 unknown         8    NA TRUE        0.218     -2.13 0.565 #> 5     5     3 0.217 unknown         8    NA FALSE       0.218     -2.20 0.504 #> 6     6     3 0.220 unknown         8    NA FALSE       0.218     -2.19 0.520 #> # ℹ 3 more variables: .pred_conc <dbl>, .pred_conc_mean <dbl>, #> #   .sample_name <chr>"},{"path":"https://kaiaragaki.github.io/qp/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Kai Aragaki. Author, maintainer.","code":""},{"path":"https://kaiaragaki.github.io/qp/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Aragaki K (2025). qp: toolkit analyzing protein quantification results. R package version 0.2.0, https://kaiaragaki.github.io/qp/.","code":"@Manual{,   title = {qp: A toolkit for analyzing protein quantification results},   author = {Kai Aragaki},   year = {2025},   note = {R package version 0.2.0},   url = {https://kaiaragaki.github.io/qp/}, }"},{"path":"https://kaiaragaki.github.io/qp/index.html","id":"qp-","dir":"","previous_headings":"","what":"A toolkit for analyzing protein quantification results","title":"A toolkit for analyzing protein quantification results","text":"qp serves robust toolkit working MicroBCA assays. Currently, protocol ’s best served .","code":""},{"path":"https://kaiaragaki.github.io/qp/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"A toolkit for analyzing protein quantification results","text":"can install development version qp GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"KaiAragaki/qp\")"},{"path":"https://kaiaragaki.github.io/qp/index.html","id":"quickstart","dir":"","previous_headings":"","what":"Quickstart","title":"A toolkit for analyzing protein quantification results","text":"nicely formatted plate surprises (, follows protocol), really need plug qp let rip: , can things like add dilution calculations: make plot assess quality:","code":"library(qp) f <- system.file(\"extdata\", \"absorbances.txt\", package = \"qp\")  # Most of these arguments are defaults # I'm only writing them out so you can see what options you can set out <- qp(   f,   replicate_orientation = \"h\",   sample_names = c(\"here\", \"are\", \"my\", \"sample\", \"names\"),   remove_empty = TRUE,   ignore_outliers = \"all\",   standard_scale = c(0, 2^((2:7) - 5)),   n_replicates = 3,   wavelength = 562 ) #> Please wait. This will take ~10 seconds. summary <- qp_summarize(out)  qp_dilute(summary, target_vol = 15, remove_standards = TRUE) #> `target_conc` is missing, using lowest sample concentration #> # A tibble: 5 × 5 #>   .sample_name sample_type .mean_pred_conc sample_to_add add_to #>   <chr>        <fct>                 <dbl>         <dbl>  <dbl> #> 1 here         unknown               1.71           3.97  11.0  #> 2 are          unknown               1.39           4.85  10.1  #> 3 my           unknown               0.989          6.85   8.15 #> 4 sample       unknown               1.30           5.23   9.77 #> 5 names        unknown               0.451         15      0 qp_plot_standards(out)"},{"path":"https://kaiaragaki.github.io/qp/reference/abs_to_col.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an absorbance to a hexidecimal color — abs_to_col","title":"Convert an absorbance to a hexidecimal color — abs_to_col","text":"Takes absorbance converts hexidecimal color. default qp_pal palette, provide color approximates real life color given absorbance.","code":""},{"path":"https://kaiaragaki.github.io/qp/reference/abs_to_col.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an absorbance to a hexidecimal color — abs_to_col","text":"","code":"abs_to_col(abs, pal)"},{"path":"https://kaiaragaki.github.io/qp/reference/abs_to_col.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert an absorbance to a hexidecimal color — abs_to_col","text":"abs Numeric. Absorbances. pal Character. vector hexidecimal colors.","code":""},{"path":"https://kaiaragaki.github.io/qp/reference/abs_to_col.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert an absorbance to a hexidecimal color — abs_to_col","text":"Character. Hexidecimal colors corresponding absorbances.","code":""},{"path":"https://kaiaragaki.github.io/qp/reference/abs_to_col.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert an absorbance to a hexidecimal color — abs_to_col","text":"absorbances typical baseline absorbance (~ 0.07) removed, index calculated logistic curve maximum 100 center 0.15.","code":""},{"path":"https://kaiaragaki.github.io/qp/reference/absorbances.html","id":null,"dir":"Reference","previous_headings":"","what":"Absorbances from a protein quantification — absorbances","title":"Absorbances from a protein quantification — absorbances","text":"Absorbances BCA protein quantification data.frame","code":""},{"path":"https://kaiaragaki.github.io/qp/reference/absorbances.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Absorbances from a protein quantification — absorbances","text":"","code":"absorbances"},{"path":[]},{"path":"https://kaiaragaki.github.io/qp/reference/absorbances.html","id":"absorbances","dir":"Reference","previous_headings":"","what":"absorbances","title":"Absorbances from a protein quantification — absorbances","text":"data.frame 96 rows 5 columns:; .row row 96 well plate, 1 refers top row. .col column 96 well plate, 1 refers left column. .abs absorbance contents well 562nm. sample_type Denotes whether sample standard unknown (sample). index Denotes individual standards/samples, gets index.","code":""},{"path":"https://kaiaragaki.github.io/qp/reference/dilute.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate dilution from known concentrations — dilute","title":"Calculate dilution from known concentrations — dilute","text":"Calculate dilution known concentrations","code":""},{"path":"https://kaiaragaki.github.io/qp/reference/dilute.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate dilution from known concentrations — dilute","text":"","code":"dilute(c1, c2 = min(c1), v2, round_for_pipettes = TRUE)"},{"path":"https://kaiaragaki.github.io/qp/reference/dilute.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate dilution from known concentrations — dilute","text":"c1 Numeric. Initial concentration sample. c2 Numeric. Target concentration sample. v2 Numeric. Target final volume sample. round_for_pipettes = TRUE, assumes volume uL. round_for_pipettes Logical. TRUE, rounds values accuracy standard pipettes using make_pipette_vol.","code":""},{"path":"https://kaiaragaki.github.io/qp/reference/dilute.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate dilution from known concentrations — dilute","text":"data.frame, sample_to_add volume sample add, add_to volume dilute sample .","code":""},{"path":"https://kaiaragaki.github.io/qp/reference/dilute.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate dilution from known concentrations — dilute","text":"","code":"dilute(203, 70, 10) #>   sample_to_add add_to #> 1          3.45   6.55 dilute(203, 70, 10, round_for_pipettes = FALSE) #>   sample_to_add   add_to #> 1      3.448276 6.551724 # Vectorized: dilute(c(8, 10, 12), c(4, 5, 6), c(7, 8, 9)) #>   sample_to_add add_to #> 1           3.5    3.5 #> 2           4.0    4.0 #> 3           4.5    4.5"},{"path":"https://kaiaragaki.github.io/qp/reference/make_pipette_vol.html","id":null,"dir":"Reference","previous_headings":"","what":"Round volume to be pipette-compatible — make_pipette_vol","title":"Round volume to be pipette-compatible — make_pipette_vol","text":"Round volume pipette-compatible","code":""},{"path":"https://kaiaragaki.github.io/qp/reference/make_pipette_vol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Round volume to be pipette-compatible — make_pipette_vol","text":"","code":"make_pipette_vol(x)"},{"path":"https://kaiaragaki.github.io/qp/reference/make_pipette_vol.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Round volume to be pipette-compatible — make_pipette_vol","text":"x Numeric. Volume rounded","code":""},{"path":"https://kaiaragaki.github.io/qp/reference/make_pipette_vol.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Round volume to be pipette-compatible — make_pipette_vol","text":"Numeric. Rounded volume.","code":""},{"path":"https://kaiaragaki.github.io/qp/reference/make_pipette_vol.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Round volume to be pipette-compatible — make_pipette_vol","text":"","code":"make_pipette_vol(104.13398) #> [1] 104.2 make_pipette_vol(15.3331) #> [1] 15.34 make_pipette_vol(9.9211) #> [1] 9.92 # Vectorized: make_pipette_vol(c(104.13398, 15.3331, 9.9211, NA, -100.1)) #> [1]  104.20   15.34    9.92      NA -100.00"},{"path":"https://kaiaragaki.github.io/qp/reference/qp.html","id":null,"dir":"Reference","previous_headings":"","what":"Quantify protein concentration from a MicroBCA assay — qp","title":"Quantify protein concentration from a MicroBCA assay — qp","text":"Quantify protein concentration MicroBCA assay","code":""},{"path":"https://kaiaragaki.github.io/qp/reference/qp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quantify protein concentration from a MicroBCA assay — qp","text":"","code":"qp(   x,   replicate_orientation = c(\"h\", \"v\"),   sample_names = NULL,   remove_empty = TRUE,   ignore_outliers = c(\"all\", \"samples\", \"standards\", \"none\"),   standard_scale = c(0, 2^((2:7) - 5)),   n_replicates = 3,   wavelength = 562 )"},{"path":"https://kaiaragaki.github.io/qp/reference/qp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quantify protein concentration from a MicroBCA assay — qp","text":"x spectramax, gp, data.frame object, path SPECTRAmax .xls(x)/.txt file. replicate_orientation Either 'h' 'v' - see Details. sample_names Optional character vector sample names. remove_empty wells less absorbance lowest standard dropped? ignore_outliers Character. group - samples standards - outliers detected removed? standard_scale Numeric. Known concentrations standards, order appear. n_replicates Numeric. number techinical replicates. wavelength Numeric. wavelength absorbance captured.","code":""},{"path":"https://kaiaragaki.github.io/qp/reference/qp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quantify protein concentration from a MicroBCA assay — qp","text":"tibble","code":""},{"path":"https://kaiaragaki.github.io/qp/reference/qp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Quantify protein concentration from a MicroBCA assay — qp","text":"x spectramax, standards must start upper left corner order dictated standard_scale. Whether left right top bottom can specified replicate_orientation. Note replicate_orientation specified direction REPLICATES lie, direction samples flow (perpendicular replicates). Note: replicate_orientation, n_replicates, wavelength silently ignored x spectramax path spectramax","code":""},{"path":"https://kaiaragaki.github.io/qp/reference/qp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quantify protein concentration from a MicroBCA assay — qp","text":"","code":"data <- system.file(\"extdata\", \"absorbances.txt\", package = \"qp\") qp(data, replicate_orientation = \"h\") #> $fit #>  #> Call: #> stats::lm(formula = .log2_conc ~ .log2_abs, data = fit_data) #>  #> Coefficients: #> (Intercept)    .log2_abs   #>       3.358        1.141   #>  #>  #> $qp #> # A tibble: 36 × 13 #>     .row  .col   .abs sample_type index .conc .is_outlier  .mean .log2_abs #>    <int> <dbl>  <dbl> <fct>       <dbl> <dbl> <lgl>        <dbl>     <dbl> #>  1     1     1 0.0686 standard        1 0     FALSE       0.0700     -3.87 #>  2     1     2 0.0717 standard        1 0     FALSE       0.0700     -3.80 #>  3     1     3 0.0698 standard        1 0     FALSE       0.0700     -3.84 #>  4     2     1 0.0825 standard        2 0.125 TRUE        0.0834     -3.60 #>  5     2     2 0.0832 standard        2 0.125 FALSE       0.0834     -3.59 #>  6     2     3 0.0835 standard        2 0.125 FALSE       0.0834     -3.58 #>  7     3     1 0.102  standard        3 0.25  FALSE       0.102      -3.29 #>  8     3     2 0.100  standard        3 0.25  TRUE        0.102      -3.32 #>  9     3     3 0.102  standard        3 0.25  FALSE       0.102      -3.30 #> 10     4     1 0.132  standard        4 0.5   FALSE       0.132      -2.92 #> # ℹ 26 more rows #> # ℹ 4 more variables: .pred <dbl>, .pred_conc <dbl>, .pred_conc_mean <dbl>, #> #   .sample_name <chr> #>"},{"path":"https://kaiaragaki.github.io/qp/reference/qp_add_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Add sample names — qp_add_names","title":"Add sample names — qp_add_names","text":"Add sample names","code":""},{"path":"https://kaiaragaki.github.io/qp/reference/qp_add_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add sample names — qp_add_names","text":"","code":"qp_add_names(x, ...)  # S3 method for class 'list' qp_add_names(x, sample_names = NULL, ...)  # S3 method for class 'data.frame' qp_add_names(x, sample_names = NULL, ...)"},{"path":"https://kaiaragaki.github.io/qp/reference/qp_add_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add sample names — qp_add_names","text":"x data.frame (list containing one) contains columns index (denotes sample number) sample_type, either \"unknown\" \"standard\". ... Unused sample_names Optional character vector. NULL, uses sample index. standard workflow, index order sample appears plate","code":""},{"path":"https://kaiaragaki.github.io/qp/reference/qp_add_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add sample names — qp_add_names","text":"","code":"df <- expand.grid(   index = c(1, 1, 2, 2, 2, 3),   sample_type = c(\"standard\", \"unknown\") )  df #>    index sample_type #> 1      1    standard #> 2      1    standard #> 3      2    standard #> 4      2    standard #> 5      2    standard #> 6      3    standard #> 7      1     unknown #> 8      1     unknown #> 9      2     unknown #> 10     2     unknown #> 11     2     unknown #> 12     3     unknown  # You don't get to name standards: qp_add_names(df, c(\"a\", \"b\", \"c\")) #>    index sample_type .sample_name #> 1      1    standard   Standard 1 #> 2      1    standard   Standard 1 #> 3      2    standard   Standard 2 #> 4      2    standard   Standard 2 #> 5      2    standard   Standard 2 #> 6      3    standard   Standard 3 #> 7      1     unknown            a #> 8      1     unknown            a #> 9      2     unknown            b #> 10     2     unknown            b #> 11     2     unknown            b #> 12     3     unknown            c  # If there aren't enough names, will use index qp_add_names(df, c(\"a\", \"b\")) #>    index sample_type .sample_name #> 1      1    standard   Standard 1 #> 2      1    standard   Standard 1 #> 3      2    standard   Standard 2 #> 4      2    standard   Standard 2 #> 5      2    standard   Standard 2 #> 6      3    standard   Standard 3 #> 7      1     unknown            a #> 8      1     unknown            a #> 9      2     unknown            b #> 10     2     unknown            b #> 11     2     unknown            b #> 12     3     unknown            3  # No names provided will use index by default qp_add_names(df) #>    index sample_type .sample_name #> 1      1    standard   Standard 1 #> 2      1    standard   Standard 1 #> 3      2    standard   Standard 2 #> 4      2    standard   Standard 2 #> 5      2    standard   Standard 2 #> 6      3    standard   Standard 3 #> 7      1     unknown            1 #> 8      1     unknown            1 #> 9      2     unknown            2 #> 10     2     unknown            2 #> 11     2     unknown            2 #> 12     3     unknown            3"},{"path":"https://kaiaragaki.github.io/qp/reference/qp_add_std_conc.html","id":null,"dir":"Reference","previous_headings":"","what":"Add known concentrations of protein to standard samples — qp_add_std_conc","title":"Add known concentrations of protein to standard samples — qp_add_std_conc","text":"Add known concentrations protein standard samples","code":""},{"path":"https://kaiaragaki.github.io/qp/reference/qp_add_std_conc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add known concentrations of protein to standard samples — qp_add_std_conc","text":"","code":"qp_add_std_conc(x, standard_scale = c(0, 2^((2:7) - 5)), ...)  # S3 method for class 'data.frame' qp_add_std_conc(x, standard_scale = c(0, 2^((2:7) - 5)), ...)  # S3 method for class 'list' qp_add_std_conc(x, standard_scale = c(0, 2^((2:7) - 5)), ...)"},{"path":"https://kaiaragaki.github.io/qp/reference/qp_add_std_conc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add known concentrations of protein to standard samples — qp_add_std_conc","text":"x data.frame containing sample_type index columns. See details. standard_scale numeric vector giving concentrations standards. units arbitrary, determine units output concentrations. ... Unused","code":""},{"path":"https://kaiaragaki.github.io/qp/reference/qp_add_std_conc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add known concentrations of protein to standard samples — qp_add_std_conc","text":"type x, .conc column","code":""},{"path":"https://kaiaragaki.github.io/qp/reference/qp_add_std_conc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add known concentrations of protein to standard samples — qp_add_std_conc","text":"Input expected two columns: sample_type: character vector denoting samples standards \"standard\". values considered unknowns. index: numeric column denoting sample number. Index 1 correspond first item standard_scale, 2 second, etc.","code":""},{"path":"https://kaiaragaki.github.io/qp/reference/qp_add_std_conc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add known concentrations of protein to standard samples — qp_add_std_conc","text":"","code":"abs <- expand.grid(   sample_type = c(\"standard\", \"unknown\"),   index = 1:7 )  abs #>    sample_type index #> 1     standard     1 #> 2      unknown     1 #> 3     standard     2 #> 4      unknown     2 #> 5     standard     3 #> 6      unknown     3 #> 7     standard     4 #> 8      unknown     4 #> 9     standard     5 #> 10     unknown     5 #> 11    standard     6 #> 12     unknown     6 #> 13    standard     7 #> 14     unknown     7  qp_add_std_conc(abs) #>    sample_type index .conc #> 1     standard     1 0.000 #> 3     standard     2 0.125 #> 5     standard     3 0.250 #> 7     standard     4 0.500 #> 9     standard     5 1.000 #> 11    standard     6 2.000 #> 13    standard     7 4.000 #> 2      unknown     1    NA #> 4      unknown     2    NA #> 6      unknown     3    NA #> 8      unknown     4    NA #> 10     unknown     5    NA #> 12     unknown     6    NA #> 14     unknown     7    NA  # Can add custom scale - doesn't have to be 'in order' or unique: qp_add_std_conc(abs, c(1, 4, 2, 2, 3, 0.125, 7)) #>    sample_type index .conc #> 1     standard     1 1.000 #> 3     standard     2 4.000 #> 5     standard     3 2.000 #> 7     standard     4 2.000 #> 9     standard     5 3.000 #> 11    standard     6 0.125 #> 13    standard     7 7.000 #> 2      unknown     1    NA #> 4      unknown     2    NA #> 6      unknown     3    NA #> 8      unknown     4    NA #> 10     unknown     5    NA #> 12     unknown     6    NA #> 14     unknown     7    NA  # Will warn - more values in `standard_scale` than standard indices # Will drop extra qp_add_std_conc(abs, 1:8) #> Warning: Not all standards in scale used #>    sample_type index .conc #> 1     standard     1     1 #> 3     standard     2     2 #> 5     standard     3     3 #> 7     standard     4     4 #> 9     standard     5     5 #> 11    standard     6     6 #> 13    standard     7     7 #> 2      unknown     1    NA #> 4      unknown     2    NA #> 6      unknown     3    NA #> 8      unknown     4    NA #> 10     unknown     5    NA #> 12     unknown     6    NA #> 14     unknown     7    NA  # Will error - fewer values in `standard_scale` than standard indices if (FALSE) {   qp_add_std_conc(abs, 1:6) }"},{"path":"https://kaiaragaki.github.io/qp/reference/qp_calc_abs_mean.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate absorbance means with optional outlier removal — qp_calc_abs_mean","title":"Calculate absorbance means with optional outlier removal — qp_calc_abs_mean","text":"Calculate absorbance means optional outlier removal","code":""},{"path":"https://kaiaragaki.github.io/qp/reference/qp_calc_abs_mean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate absorbance means with optional outlier removal — qp_calc_abs_mean","text":"","code":"qp_calc_abs_mean(x, ignore_outliers = c(\"all\", \"standards\", \"samples\", \"none\"))  # S3 method for class 'data.frame' qp_calc_abs_mean(x, ignore_outliers = c(\"all\", \"standards\", \"samples\", \"none\"))  # S3 method for class 'list' qp_calc_abs_mean(x, ignore_outliers = c(\"all\", \"standards\", \"samples\", \"none\"))"},{"path":"https://kaiaragaki.github.io/qp/reference/qp_calc_abs_mean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate absorbance means with optional outlier removal — qp_calc_abs_mean","text":"x data.frame list containing data.frame named qp. See details. ignore_outliers sample types outliers ignored mean calculations? .is_outlier column supplied, argument ignored.","code":""},{"path":"https://kaiaragaki.github.io/qp/reference/qp_calc_abs_mean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate absorbance means with optional outlier removal — qp_calc_abs_mean","text":"input tibble .is_outlier column .mean column","code":""},{"path":"https://kaiaragaki.github.io/qp/reference/qp_calc_abs_mean.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate absorbance means with optional outlier removal — qp_calc_abs_mean","text":"Input data.frame must contain following columns: sample_type. Character. Must contain values either \"standard\" \"unknown\" index. Numeric. Denotes sample number. .abs. Numeric. Contains absorbance values. boolean .is_outlier supplied, used instead.","code":""},{"path":"https://kaiaragaki.github.io/qp/reference/qp_calc_abs_mean.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate absorbance means with optional outlier removal — qp_calc_abs_mean","text":"","code":"library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union  abs <- expand.grid(   sample_type = c(\"standard\", \"unknown\"),   index = 1:7,   rep = 1:3 ) |>   dplyr::arrange(sample_type, index, rep)  abs$.abs <- abs(rnorm(nrow(abs), mean = abs$index))  # Selecting different subsets for outlier removal qp_calc_abs_mean(abs, \"none\") #>    sample_type index rep      .abs .is_outlier     .mean #> 1     standard     1   1 0.8218177          NA 0.7767643 #> 2     standard     1   2 0.7526747          NA 0.7767643 #> 3     standard     1   3 0.7558004          NA 0.7767643 #> 4     standard     2   1 1.7172946          NA 1.9308591 #> 5     standard     2   2 1.4463006          NA 1.9308591 #> 6     standard     2   3 2.6289820          NA 1.9308591 #> 7     standard     3   1 5.0650249          NA 3.3154875 #> 8     standard     3   2 1.3690106          NA 3.3154875 #> 9     standard     3   3 3.5124269          NA 3.3154875 #> 10    standard     4   1 2.1369885          NA 3.1874580 #> 11    standard     4   2 3.4779875          NA 3.1874580 #> 12    standard     4   3 3.9473981          NA 3.1874580 #> 13    standard     5   1 5.5429963          NA 5.0323586 #> 14    standard     5   2 4.0859252          NA 5.0323586 #> 15    standard     5   3 5.4681544          NA 5.0323586 #> 16    standard     6   1 6.3629513          NA 5.9320613 #> 17    standard     6   2 4.6954565          NA 5.9320613 #> 18    standard     6   3 6.7377763          NA 5.9320613 #> 19    standard     7   1 8.8885049          NA 7.2850708 #> 20    standard     7   2 6.9025549          NA 7.2850708 #> 21    standard     7   3 6.0641526          NA 7.2850708 #> 22     unknown     1   1 0.9840497          NA 0.5565535 #> 23     unknown     1   2 0.1732110          NA 0.5565535 #> 24     unknown     1   3 0.5123997          NA 0.5565535 #> 25     unknown     2   1 2.9353632          NA 2.4518458 #> 26     unknown     2   2 2.1764886          NA 2.4518458 #> 27     unknown     2   3 2.2436855          NA 2.4518458 #> 28     unknown     3   1 4.6235489          NA 3.5338633 #> 29     unknown     3   2 3.1120381          NA 3.5338633 #> 30     unknown     3   3 2.8660030          NA 3.5338633 #> 31     unknown     4   1 2.0899125          NA 3.1657431 #> 32     unknown     4   2 3.7207628          NA 3.1657431 #> 33     unknown     4   3 3.6865540          NA 3.1657431 #> 34     unknown     5   1 6.0673079          NA 5.1660731 #> 35     unknown     5   2 5.0700349          NA 5.1660731 #> 36     unknown     5   3 4.3608767          NA 5.1660731 #> 37     unknown     6   1 5.9500351          NA 6.0477829 #> 38     unknown     6   2 5.7485166          NA 6.0477829 #> 39     unknown     6   3 6.4447971          NA 6.0477829 #> 40     unknown     7   1 9.7554176          NA 8.1265527 #> 41     unknown     7   2 7.0465314          NA 8.1265527 #> 42     unknown     7   3 7.5777091          NA 8.1265527  qp_calc_abs_mean(abs, \"standards\") #>    sample_type index rep      .abs .is_outlier     .mean #> 1     standard     1   1 0.8218177        TRUE 0.7542375 #> 2     standard     1   2 0.7526747       FALSE 0.7542375 #> 3     standard     1   3 0.7558004       FALSE 0.7542375 #> 4     standard     2   1 1.7172946       FALSE 1.5817976 #> 5     standard     2   2 1.4463006       FALSE 1.5817976 #> 6     standard     2   3 2.6289820        TRUE 1.5817976 #> 7     standard     3   1 5.0650249       FALSE 3.3154875 #> 8     standard     3   2 1.3690106       FALSE 3.3154875 #> 9     standard     3   3 3.5124269       FALSE 3.3154875 #> 10    standard     4   1 2.1369885        TRUE 3.7126928 #> 11    standard     4   2 3.4779875       FALSE 3.7126928 #> 12    standard     4   3 3.9473981       FALSE 3.7126928 #> 13    standard     5   1 5.5429963       FALSE 5.5055754 #> 14    standard     5   2 4.0859252        TRUE 5.5055754 #> 15    standard     5   3 5.4681544       FALSE 5.5055754 #> 16    standard     6   1 6.3629513       FALSE 6.5503638 #> 17    standard     6   2 4.6954565        TRUE 6.5503638 #> 18    standard     6   3 6.7377763       FALSE 6.5503638 #> 19    standard     7   1 8.8885049        TRUE 6.4833538 #> 20    standard     7   2 6.9025549       FALSE 6.4833538 #> 21    standard     7   3 6.0641526       FALSE 6.4833538 #> 22     unknown     1   1 0.9840497          NA 0.5565535 #> 23     unknown     1   2 0.1732110          NA 0.5565535 #> 24     unknown     1   3 0.5123997          NA 0.5565535 #> 25     unknown     2   1 2.9353632          NA 2.4518458 #> 26     unknown     2   2 2.1764886          NA 2.4518458 #> 27     unknown     2   3 2.2436855          NA 2.4518458 #> 28     unknown     3   1 4.6235489          NA 3.5338633 #> 29     unknown     3   2 3.1120381          NA 3.5338633 #> 30     unknown     3   3 2.8660030          NA 3.5338633 #> 31     unknown     4   1 2.0899125          NA 3.1657431 #> 32     unknown     4   2 3.7207628          NA 3.1657431 #> 33     unknown     4   3 3.6865540          NA 3.1657431 #> 34     unknown     5   1 6.0673079          NA 5.1660731 #> 35     unknown     5   2 5.0700349          NA 5.1660731 #> 36     unknown     5   3 4.3608767          NA 5.1660731 #> 37     unknown     6   1 5.9500351          NA 6.0477829 #> 38     unknown     6   2 5.7485166          NA 6.0477829 #> 39     unknown     6   3 6.4447971          NA 6.0477829 #> 40     unknown     7   1 9.7554176          NA 8.1265527 #> 41     unknown     7   2 7.0465314          NA 8.1265527 #> 42     unknown     7   3 7.5777091          NA 8.1265527  qp_calc_abs_mean(abs, \"samples\") #>    sample_type index rep      .abs .is_outlier     .mean #> 1     standard     1   1 0.8218177          NA 0.7767643 #> 2     standard     1   2 0.7526747          NA 0.7767643 #> 3     standard     1   3 0.7558004          NA 0.7767643 #> 4     standard     2   1 1.7172946          NA 1.9308591 #> 5     standard     2   2 1.4463006          NA 1.9308591 #> 6     standard     2   3 2.6289820          NA 1.9308591 #> 7     standard     3   1 5.0650249          NA 3.3154875 #> 8     standard     3   2 1.3690106          NA 3.3154875 #> 9     standard     3   3 3.5124269          NA 3.3154875 #> 10    standard     4   1 2.1369885          NA 3.1874580 #> 11    standard     4   2 3.4779875          NA 3.1874580 #> 12    standard     4   3 3.9473981          NA 3.1874580 #> 13    standard     5   1 5.5429963          NA 5.0323586 #> 14    standard     5   2 4.0859252          NA 5.0323586 #> 15    standard     5   3 5.4681544          NA 5.0323586 #> 16    standard     6   1 6.3629513          NA 5.9320613 #> 17    standard     6   2 4.6954565          NA 5.9320613 #> 18    standard     6   3 6.7377763          NA 5.9320613 #> 19    standard     7   1 8.8885049          NA 7.2850708 #> 20    standard     7   2 6.9025549          NA 7.2850708 #> 21    standard     7   3 6.0641526          NA 7.2850708 #> 22     unknown     1   1 0.9840497       FALSE 0.5565535 #> 23     unknown     1   2 0.1732110       FALSE 0.5565535 #> 24     unknown     1   3 0.5123997       FALSE 0.5565535 #> 25     unknown     2   1 2.9353632        TRUE 2.2100870 #> 26     unknown     2   2 2.1764886       FALSE 2.2100870 #> 27     unknown     2   3 2.2436855       FALSE 2.2100870 #> 28     unknown     3   1 4.6235489        TRUE 2.9890205 #> 29     unknown     3   2 3.1120381       FALSE 2.9890205 #> 30     unknown     3   3 2.8660030       FALSE 2.9890205 #> 31     unknown     4   1 2.0899125        TRUE 3.7036584 #> 32     unknown     4   2 3.7207628       FALSE 3.7036584 #> 33     unknown     4   3 3.6865540       FALSE 3.7036584 #> 34     unknown     5   1 6.0673079       FALSE 5.1660731 #> 35     unknown     5   2 5.0700349       FALSE 5.1660731 #> 36     unknown     5   3 4.3608767       FALSE 5.1660731 #> 37     unknown     6   1 5.9500351       FALSE 5.8492758 #> 38     unknown     6   2 5.7485166       FALSE 5.8492758 #> 39     unknown     6   3 6.4447971        TRUE 5.8492758 #> 40     unknown     7   1 9.7554176        TRUE 7.3121202 #> 41     unknown     7   2 7.0465314       FALSE 7.3121202 #> 42     unknown     7   3 7.5777091       FALSE 7.3121202  qp_calc_abs_mean(abs, \"all\") #>    sample_type index rep      .abs .is_outlier     .mean #> 1     standard     1   1 0.8218177        TRUE 0.7542375 #> 2     standard     1   2 0.7526747       FALSE 0.7542375 #> 3     standard     1   3 0.7558004       FALSE 0.7542375 #> 4     standard     2   1 1.7172946       FALSE 1.5817976 #> 5     standard     2   2 1.4463006       FALSE 1.5817976 #> 6     standard     2   3 2.6289820        TRUE 1.5817976 #> 7     standard     3   1 5.0650249       FALSE 3.3154875 #> 8     standard     3   2 1.3690106       FALSE 3.3154875 #> 9     standard     3   3 3.5124269       FALSE 3.3154875 #> 10    standard     4   1 2.1369885        TRUE 3.7126928 #> 11    standard     4   2 3.4779875       FALSE 3.7126928 #> 12    standard     4   3 3.9473981       FALSE 3.7126928 #> 13    standard     5   1 5.5429963       FALSE 5.5055754 #> 14    standard     5   2 4.0859252        TRUE 5.5055754 #> 15    standard     5   3 5.4681544       FALSE 5.5055754 #> 16    standard     6   1 6.3629513       FALSE 6.5503638 #> 17    standard     6   2 4.6954565        TRUE 6.5503638 #> 18    standard     6   3 6.7377763       FALSE 6.5503638 #> 19    standard     7   1 8.8885049        TRUE 6.4833538 #> 20    standard     7   2 6.9025549       FALSE 6.4833538 #> 21    standard     7   3 6.0641526       FALSE 6.4833538 #> 22     unknown     1   1 0.9840497       FALSE 0.5565535 #> 23     unknown     1   2 0.1732110       FALSE 0.5565535 #> 24     unknown     1   3 0.5123997       FALSE 0.5565535 #> 25     unknown     2   1 2.9353632        TRUE 2.2100870 #> 26     unknown     2   2 2.1764886       FALSE 2.2100870 #> 27     unknown     2   3 2.2436855       FALSE 2.2100870 #> 28     unknown     3   1 4.6235489        TRUE 2.9890205 #> 29     unknown     3   2 3.1120381       FALSE 2.9890205 #> 30     unknown     3   3 2.8660030       FALSE 2.9890205 #> 31     unknown     4   1 2.0899125        TRUE 3.7036584 #> 32     unknown     4   2 3.7207628       FALSE 3.7036584 #> 33     unknown     4   3 3.6865540       FALSE 3.7036584 #> 34     unknown     5   1 6.0673079       FALSE 5.1660731 #> 35     unknown     5   2 5.0700349       FALSE 5.1660731 #> 36     unknown     5   3 4.3608767       FALSE 5.1660731 #> 37     unknown     6   1 5.9500351       FALSE 5.8492758 #> 38     unknown     6   2 5.7485166       FALSE 5.8492758 #> 39     unknown     6   3 6.4447971        TRUE 5.8492758 #> 40     unknown     7   1 9.7554176        TRUE 7.3121202 #> 41     unknown     7   2 7.0465314       FALSE 7.3121202 #> 42     unknown     7   3 7.5777091       FALSE 7.3121202  # If an `.is_outlier` column is provided, that will be used instead:  abs$.is_outlier <- rep(c(TRUE, FALSE), length.out = nrow(abs))  qp_calc_abs_mean(abs) #> Data has `.is_outlier` column, using that #>    sample_type index rep      .abs .is_outlier     .mean #> 1     standard     1   1 0.8218177        TRUE 0.7526747 #> 2     standard     1   2 0.7526747       FALSE 0.7526747 #> 3     standard     1   3 0.7558004        TRUE 0.7526747 #> 4     standard     2   1 1.7172946       FALSE 2.1731383 #> 5     standard     2   2 1.4463006        TRUE 2.1731383 #> 6     standard     2   3 2.6289820       FALSE 2.1731383 #> 7     standard     3   1 5.0650249        TRUE 1.3690106 #> 8     standard     3   2 1.3690106       FALSE 1.3690106 #> 9     standard     3   3 3.5124269        TRUE 1.3690106 #> 10    standard     4   1 2.1369885       FALSE 3.0421933 #> 11    standard     4   2 3.4779875        TRUE 3.0421933 #> 12    standard     4   3 3.9473981       FALSE 3.0421933 #> 13    standard     5   1 5.5429963        TRUE 4.0859252 #> 14    standard     5   2 4.0859252       FALSE 4.0859252 #> 15    standard     5   3 5.4681544        TRUE 4.0859252 #> 16    standard     6   1 6.3629513       FALSE 6.5503638 #> 17    standard     6   2 4.6954565        TRUE 6.5503638 #> 18    standard     6   3 6.7377763       FALSE 6.5503638 #> 19    standard     7   1 8.8885049        TRUE 6.9025549 #> 20    standard     7   2 6.9025549       FALSE 6.9025549 #> 21    standard     7   3 6.0641526        TRUE 6.9025549 #> 22     unknown     1   1 0.9840497       FALSE 0.7482247 #> 23     unknown     1   2 0.1732110        TRUE 0.7482247 #> 24     unknown     1   3 0.5123997       FALSE 0.7482247 #> 25     unknown     2   1 2.9353632        TRUE 2.1764886 #> 26     unknown     2   2 2.1764886       FALSE 2.1764886 #> 27     unknown     2   3 2.2436855        TRUE 2.1764886 #> 28     unknown     3   1 4.6235489       FALSE 3.7447759 #> 29     unknown     3   2 3.1120381        TRUE 3.7447759 #> 30     unknown     3   3 2.8660030       FALSE 3.7447759 #> 31     unknown     4   1 2.0899125        TRUE 3.7207628 #> 32     unknown     4   2 3.7207628       FALSE 3.7207628 #> 33     unknown     4   3 3.6865540        TRUE 3.7207628 #> 34     unknown     5   1 6.0673079       FALSE 5.2140923 #> 35     unknown     5   2 5.0700349        TRUE 5.2140923 #> 36     unknown     5   3 4.3608767       FALSE 5.2140923 #> 37     unknown     6   1 5.9500351        TRUE 5.7485166 #> 38     unknown     6   2 5.7485166       FALSE 5.7485166 #> 39     unknown     6   3 6.4447971        TRUE 5.7485166 #> 40     unknown     7   1 9.7554176       FALSE 8.6665633 #> 41     unknown     7   2 7.0465314        TRUE 8.6665633 #> 42     unknown     7   3 7.5777091       FALSE 8.6665633"},{"path":"https://kaiaragaki.github.io/qp/reference/qp_calc_conc.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict concentrations from standards fit — qp_calc_conc","title":"Predict concentrations from standards fit — qp_calc_conc","text":"Predict concentrations standards fit","code":""},{"path":"https://kaiaragaki.github.io/qp/reference/qp_calc_conc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict concentrations from standards fit — qp_calc_conc","text":"","code":"qp_calc_conc(x, ignore_outliers = TRUE, group_cols = c(\"sample_type\", \"index\"))"},{"path":"https://kaiaragaki.github.io/qp/reference/qp_calc_conc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict concentrations from standards fit — qp_calc_conc","text":"x list. See details. ignore_outliers Boolean. outliers considered calculating mean? See details. group_cols Character vector. Columns group taking mean.","code":""},{"path":"https://kaiaragaki.github.io/qp/reference/qp_calc_conc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict concentrations from standards fit — qp_calc_conc","text":"Returns list input fit data.frame, additional columns: .pred: predicted value provided model .pred_conc: .pred, transformed conc_transform .pred_conc_mean: mean .pred_conc, sans samples column .is_outlier == TRUE","code":""},{"path":"https://kaiaragaki.github.io/qp/reference/qp_calc_conc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Predict concentrations from standards fit — qp_calc_conc","text":"supplied list contain two items - fit, generated qp_fit, qp, data.frame. qp contain following: Columns used fit. Usually, .log2_abs columns group_cols ignore_outliers = TRUE, .is_outlier used supplied, created .","code":""},{"path":"https://kaiaragaki.github.io/qp/reference/qp_calc_conc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict concentrations from standards fit — qp_calc_conc","text":"","code":"data <- system.file(\"extdata\", \"absorbances.txt\", package = \"qp\") calculated <- qp(data, replicate_orientation = \"h\")  # Making a minimal object: calculated$qp <- calculated$qp |>   dplyr::select(     .log2_abs, sample_type, index, .is_outlier   )  calculated #> $fit #>  #> Call: #> stats::lm(formula = .log2_conc ~ .log2_abs, data = fit_data) #>  #> Coefficients: #> (Intercept)    .log2_abs   #>       3.358        1.141   #>  #>  #> $qp #> # A tibble: 36 × 4 #>    .log2_abs sample_type index .is_outlier #>        <dbl> <fct>       <dbl> <lgl>       #>  1     -3.87 standard        1 FALSE       #>  2     -3.80 standard        1 FALSE       #>  3     -3.84 standard        1 FALSE       #>  4     -3.60 standard        2 TRUE        #>  5     -3.59 standard        2 FALSE       #>  6     -3.58 standard        2 FALSE       #>  7     -3.29 standard        3 FALSE       #>  8     -3.32 standard        3 TRUE        #>  9     -3.30 standard        3 FALSE       #> 10     -2.92 standard        4 FALSE       #> # ℹ 26 more rows #>   qp_calc_conc(calculated) #> $fit #>  #> Call: #> stats::lm(formula = .log2_conc ~ .log2_abs, data = fit_data) #>  #> Coefficients: #> (Intercept)    .log2_abs   #>       3.358        1.141   #>  #>  #> $qp #> # A tibble: 36 × 7 #>    .log2_abs sample_type index .is_outlier   .pred .pred_conc .pred_conc_mean #>        <dbl> <fct>       <dbl> <lgl>         <dbl>      <dbl>           <dbl> #>  1     -3.87 standard        1 FALSE       -1.05     -0.0177         -0.00623 #>  2     -3.80 standard        1 FALSE       -0.979     0.00719        -0.00623 #>  3     -3.84 standard        1 FALSE       -1.02     -0.00811        -0.00623 #>  4     -3.60 standard        2 TRUE        -0.748     0.0952          0.102   #>  5     -3.59 standard        2 FALSE       -0.735     0.101           0.102   #>  6     -3.58 standard        2 FALSE       -0.729     0.103           0.102   #>  7     -3.29 standard        3 FALSE       -0.394     0.261           0.258   #>  8     -3.32 standard        3 TRUE        -0.425     0.245           0.258   #>  9     -3.30 standard        3 FALSE       -0.404     0.256           0.258   #> 10     -2.92 standard        4 FALSE        0.0275    0.519           0.520   #> # ℹ 26 more rows #>"},{"path":"https://kaiaragaki.github.io/qp/reference/qp_dilute.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate dilutions from predicted concentrations — qp_dilute","title":"Calculate dilutions from predicted concentrations — qp_dilute","text":"Calculate dilutions predicted concentrations","code":""},{"path":"https://kaiaragaki.github.io/qp/reference/qp_dilute.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate dilutions from predicted concentrations — qp_dilute","text":"","code":"qp_dilute(x, ...)  # S3 method for class 'data.frame' qp_dilute(   x,   target_conc = NULL,   target_vol = 15,   remove_standards = FALSE,   pipette_vol_compat = TRUE,   ... )  # S3 method for class 'list' qp_dilute(   x,   target_conc = NULL,   target_vol = 15,   remove_standards = FALSE,   ... )"},{"path":"https://kaiaragaki.github.io/qp/reference/qp_dilute.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate dilutions from predicted concentrations — qp_dilute","text":"x data.frame list containing data.frame named qp column named .pred_conc .pred_conc_mean. , favor .pred_conc_mean. ... Unused target_conc Numeric vector. Target concentration (mg/mL) protein. length == 1, recycled. target_vol Target volume uL. length == 1, recycled. remove_standards Boolean. standards removed results? pipette_vol_compat Boolean. Shold returned numbers rounded typically precision pipette?","code":""},{"path":"https://kaiaragaki.github.io/qp/reference/qp_dilute.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate dilutions from predicted concentrations — qp_dilute","text":"input, volumes lysate volumes diluent add.","code":""},{"path":"https://kaiaragaki.github.io/qp/reference/qp_dilute.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate dilutions from predicted concentrations — qp_dilute","text":"","code":"df <- data.frame(.pred_conc = 1) qp_dilute(df, target_conc = 0.5, target_vol = 30) #>   .pred_conc sample_to_add add_to .target_conc .target_vol #> 1          1            15     15          0.5          30   # Many sample and target concentrations df2 <- data.frame(.pred_conc = 1:3) qp_dilute(df2, target_conc = c(0.1, 0.4, 0.8), target_vol = 30) #>   .pred_conc sample_to_add add_to .target_conc .target_vol #> 1          1             3     27          0.1          30 #> 2          2             6     24          0.4          30 #> 3          3             8     22          0.8          30  # Takes a list, so long as it has a data.frame named qp as one of the items: ls <- list(qp = data.frame(.pred_conc = 3)) qp_dilute(ls, target_conc = 0.5, target_vol = 30) #> $qp #>   .pred_conc sample_to_add add_to .target_conc .target_vol #> 1          3             5     25          0.5          30 #>"},{"path":"https://kaiaragaki.github.io/qp/reference/qp_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit an lm using standards absorbances — qp_fit","title":"Fit an lm using standards absorbances — qp_fit","text":"Fit lm using standards absorbances","code":""},{"path":"https://kaiaragaki.github.io/qp/reference/qp_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit an lm using standards absorbances — qp_fit","text":"","code":"qp_fit(x)  # S3 method for class 'data.frame' qp_fit(x)  # S3 method for class 'list' qp_fit(x)"},{"path":"https://kaiaragaki.github.io/qp/reference/qp_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit an lm using standards absorbances — qp_fit","text":"x data.frame list containing data.frame name qp. See details.","code":""},{"path":"https://kaiaragaki.github.io/qp/reference/qp_fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit an lm using standards absorbances — qp_fit","text":"list containing: fit, lm object fit formula .log2_conc ~ .log2_abs, fit using non-outlier standards qp, input data","code":""},{"path":"https://kaiaragaki.github.io/qp/reference/qp_fit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit an lm using standards absorbances — qp_fit","text":"supplied data.frame must following columns: sample_type. Character. 'standard', assumed sample .is_outlier. Boolean. TRUE, assumed outlier removed fitting. FALSE NA, used fitting. unsupplied, create one values set NA. .conc. Numeric. Known concentration standard. .log2_abs. Numeric. log2 absorbances","code":""},{"path":"https://kaiaragaki.github.io/qp/reference/qp_fit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit an lm using standards absorbances — qp_fit","text":"","code":"absorbances |>     qp_add_std_conc() |>     qp_fit() #> Warning: `sample_type` contains values other than `standard` and `unknown` #> ! These values may be ignored downstream! #> Did not find column `.log2_abs`, calculating. #> Did not find column `.is_outlier` #> Running `qp_mark_outliers` with `ignore_outliers = all` #> $fit #>  #> Call: #> stats::lm(formula = .log2_conc ~ .log2_abs, data = fit_data) #>  #> Coefficients: #> (Intercept)    .log2_abs   #>       2.378        0.850   #>  #>  #> $qp #> # A tibble: 88 × 8 #>     .row  .col   .abs sample_type index .conc .log2_abs .is_outlier #>    <int> <dbl>  <dbl> <fct>       <dbl> <dbl>     <dbl> <lgl>       #>  1     1     1 0.0707 standard        1 0         -3.82 FALSE       #>  2     2     1 0.0786 standard        1 0         -3.67 TRUE        #>  3     3     1 0.0714 standard        1 0         -3.81 FALSE       #>  4     1     2 0.0795 standard        2 0.125     -3.65 FALSE       #>  5     2     2 0.0799 standard        2 0.125     -3.65 FALSE       #>  6     3     2 0.0805 standard        2 0.125     -3.63 FALSE       #>  7     1     3 0.0999 standard        3 0.25      -3.32 FALSE       #>  8     2     3 0.0955 standard        3 0.25      -3.39 FALSE       #>  9     3     3 0.0976 standard        3 0.25      -3.36 FALSE       #> 10     1     4 0.151  standard        4 0.5       -2.72 TRUE        #> # ℹ 78 more rows #>"},{"path":"https://kaiaragaki.github.io/qp/reference/qp_mark_outliers.html","id":null,"dir":"Reference","previous_headings":"","what":"Mark absorbance outliers — qp_mark_outliers","title":"Mark absorbance outliers — qp_mark_outliers","text":"Mark absorbance outliers","code":""},{"path":"https://kaiaragaki.github.io/qp/reference/qp_mark_outliers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mark absorbance outliers — qp_mark_outliers","text":"","code":"qp_mark_outliers(x, ignore_outliers = c(\"all\", \"standards\", \"samples\", \"none\"))  # S3 method for class 'data.frame' qp_mark_outliers(x, ignore_outliers = c(\"all\", \"standards\", \"samples\", \"none\"))  # S3 method for class 'list' qp_mark_outliers(x, ignore_outliers = c(\"all\", \"standards\", \"samples\", \"none\"))"},{"path":"https://kaiaragaki.github.io/qp/reference/qp_mark_outliers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mark absorbance outliers — qp_mark_outliers","text":"x data.frame list containing data.frame named qp. See details. ignore_outliers sample types outliers marked?","code":""},{"path":"https://kaiaragaki.github.io/qp/reference/qp_mark_outliers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mark absorbance outliers — qp_mark_outliers","text":"input tibble .is_outlier column","code":""},{"path":"https://kaiaragaki.github.io/qp/reference/qp_mark_outliers.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Mark absorbance outliers — qp_mark_outliers","text":"Input data.frame must contain following columns: sample_type. Character. Must contain values either \"standard\" \"unknown\" index. Numeric. Denotes sample number. .abs. Numeric. Contains absorbance values.","code":""},{"path":"https://kaiaragaki.github.io/qp/reference/qp_mark_outliers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mark absorbance outliers — qp_mark_outliers","text":"","code":"df <- data.frame(   sample_type = rep(c(\"standard\", \"unknown\"), each = 3),   index = c(1, 1, 1, 2, 2, 2),   .abs = c(1, 1, 1, 1, 1, 2) )  qp_mark_outliers(df, ignore_outliers = \"all\") #>   sample_type index .abs .is_outlier #> 1    standard     1    1       FALSE #> 2    standard     1    1       FALSE #> 3    standard     1    1       FALSE #> 4     unknown     2    1       FALSE #> 5     unknown     2    1       FALSE #> 6     unknown     2    2        TRUE qp_mark_outliers(df, ignore_outliers = \"standards\") #>   sample_type index .abs .is_outlier #> 1    standard     1    1       FALSE #> 2    standard     1    1       FALSE #> 3    standard     1    1       FALSE #> 4     unknown     2    1          NA #> 5     unknown     2    1          NA #> 6     unknown     2    2          NA qp_mark_outliers(df, ignore_outliers = \"samples\") #>   sample_type index .abs .is_outlier #> 1    standard     1    1          NA #> 2    standard     1    1          NA #> 3    standard     1    1          NA #> 4     unknown     2    1       FALSE #> 5     unknown     2    1       FALSE #> 6     unknown     2    2        TRUE qp_mark_outliers(df, ignore_outliers = \"none\") #>   sample_type index .abs .is_outlier #> 1    standard     1    1          NA #> 2    standard     1    1          NA #> 3    standard     1    1          NA #> 4     unknown     2    1          NA #> 5     unknown     2    1          NA #> 6     unknown     2    2          NA"},{"path":"https://kaiaragaki.github.io/qp/reference/qp_pal.html","id":null,"dir":"Reference","previous_headings":"","what":"The default color palette for qp — qp_pal","title":"The default color palette for qp — qp_pal","text":"attempts match real life colors protein quantification experiment, combination abs_to_col","code":""},{"path":"https://kaiaragaki.github.io/qp/reference/qp_pal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The default color palette for qp — qp_pal","text":"","code":"qp_pal"},{"path":"https://kaiaragaki.github.io/qp/reference/qp_pal.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"The default color palette for qp — qp_pal","text":"object class character length 100.","code":""},{"path":"https://kaiaragaki.github.io/qp/reference/qp_plot_plate.html","id":null,"dir":"Reference","previous_headings":"","what":"View the absorbances of an analyzed qp as they were on the plate — qp_plot_plate","title":"View the absorbances of an analyzed qp as they were on the plate — qp_plot_plate","text":"View absorbances analyzed qp plate","code":""},{"path":"https://kaiaragaki.github.io/qp/reference/qp_plot_plate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"View the absorbances of an analyzed qp as they were on the plate — qp_plot_plate","text":"","code":"qp_plot_plate(x, size = 15)"},{"path":"https://kaiaragaki.github.io/qp/reference/qp_plot_plate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"View the absorbances of an analyzed qp as they were on the plate — qp_plot_plate","text":"x data.frame .row, .col, .abs columns size size points used illustrate wells. Passed geom_point.","code":""},{"path":"https://kaiaragaki.github.io/qp/reference/qp_plot_plate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"View the absorbances of an analyzed qp as they were on the plate — qp_plot_plate","text":"ggplot","code":""},{"path":"https://kaiaragaki.github.io/qp/reference/qp_plot_plate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"View the absorbances of an analyzed qp as they were on the plate — qp_plot_plate","text":"","code":"qp_plot_plate(absorbances)"},{"path":"https://kaiaragaki.github.io/qp/reference/qp_plot_standards.html","id":null,"dir":"Reference","previous_headings":"","what":"View an absorbance/concentration plot — qp_plot_standards","title":"View an absorbance/concentration plot — qp_plot_standards","text":"View absorbance/concentration plot","code":""},{"path":"https://kaiaragaki.github.io/qp/reference/qp_plot_standards.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"View an absorbance/concentration plot — qp_plot_standards","text":"","code":"qp_plot_standards(x)"},{"path":"https://kaiaragaki.github.io/qp/reference/qp_plot_standards.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"View an absorbance/concentration plot — qp_plot_standards","text":"x output qp qp_calc_conc","code":""},{"path":"https://kaiaragaki.github.io/qp/reference/qp_plot_standards.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"View an absorbance/concentration plot — qp_plot_standards","text":"ggplot","code":""},{"path":"https://kaiaragaki.github.io/qp/reference/qp_plot_standards.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"View an absorbance/concentration plot — qp_plot_standards","text":"","code":"absorbances |>   qp() |>   qp_plot_standards() #> Warning: `sample_type` contains values other than `standard` and `unknown` #> ! These values may be ignored downstream! #> Warning: `sample_type` contains values other than `standard` and `unknown` #> ! These values may be ignored downstream!"},{"path":"https://kaiaragaki.github.io/qp/reference/qp_remove_empty.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove empty wells from data — qp_remove_empty","title":"Remove empty wells from data — qp_remove_empty","text":"Remove empty wells data","code":""},{"path":"https://kaiaragaki.github.io/qp/reference/qp_remove_empty.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove empty wells from data — qp_remove_empty","text":"","code":"qp_remove_empty(x)  # S3 method for class 'data.frame' qp_remove_empty(x)  # S3 method for class 'list' qp_remove_empty(x)"},{"path":"https://kaiaragaki.github.io/qp/reference/qp_remove_empty.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove empty wells from data — qp_remove_empty","text":"x data.frame list containing data.frame named qp containing columns .pred_conc sample_type. See details.","code":""},{"path":"https://kaiaragaki.github.io/qp/reference/qp_remove_empty.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove empty wells from data — qp_remove_empty","text":"input","code":""},{"path":"https://kaiaragaki.github.io/qp/reference/qp_remove_empty.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Remove empty wells from data — qp_remove_empty","text":"function keeps columns positive .pred_conc sample_type == \"standard\"","code":""},{"path":"https://kaiaragaki.github.io/qp/reference/qp_remove_empty.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove empty wells from data — qp_remove_empty","text":"","code":"df <- expand.grid(   .pred_conc = 0:1,   sample_type = c(\"standard\", \"unknown\") )  df #>   .pred_conc sample_type #> 1          0    standard #> 2          1    standard #> 3          0     unknown #> 4          1     unknown  qp_remove_empty(df) #>   .pred_conc sample_type #> 1          0    standard #> 2          1    standard #> 3          1     unknown"},{"path":"https://kaiaragaki.github.io/qp/reference/qp_report.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a report for a protein quantificaiton experiment — qp_report","title":"Create a report for a protein quantificaiton experiment — qp_report","text":"Create report protein quantificaiton experiment","code":""},{"path":"https://kaiaragaki.github.io/qp/reference/qp_report.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a report for a protein quantificaiton experiment — qp_report","text":"","code":"qp_report(qp, output_file, other = list())"},{"path":"https://kaiaragaki.github.io/qp/reference/qp_report.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a report for a protein quantificaiton experiment — qp_report","text":"qp Likely output qp qp_dilute. output_file Character. path file export, including .html Generally used Shiny application. Assumes named list key-values used document report parameters.","code":""},{"path":"https://kaiaragaki.github.io/qp/reference/qp_report.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a report for a protein quantificaiton experiment — qp_report","text":"","code":"if (FALSE) { # \\dontrun{ absorbances |>   qp() |>   qp_dilute() |>   qp_report(     \"~/my_report.html\",     other = list(key = \"value\") # Essentially metadata   ) } # }"},{"path":"https://kaiaragaki.github.io/qp/reference/qp_summarize.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize output from qp pipeline — qp_summarize","title":"Summarize output from qp pipeline — qp_summarize","text":"Summarize output qp pipeline","code":""},{"path":"https://kaiaragaki.github.io/qp/reference/qp_summarize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize output from qp pipeline — qp_summarize","text":"","code":"qp_summarize(x)  # S3 method for class 'data.frame' qp_summarize(x)  # S3 method for class 'list' qp_summarize(x)"},{"path":"https://kaiaragaki.github.io/qp/reference/qp_summarize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize output from qp pipeline — qp_summarize","text":"x data.frame list containing data.frame named qp","code":""},{"path":"https://kaiaragaki.github.io/qp/reference/qp_summarize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize output from qp pipeline — qp_summarize","text":"tibble sample name, sample_type, mean predicted concentration (.pred_conc_mean)","code":""},{"path":"https://kaiaragaki.github.io/qp/reference/qp_tidy.html","id":null,"dir":"Reference","previous_headings":"","what":"Read in and wrangle protein quantification data — qp_tidy","title":"Read in and wrangle protein quantification data — qp_tidy","text":"Read wrangle protein quantification data","code":""},{"path":"https://kaiaragaki.github.io/qp/reference/qp_tidy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read in and wrangle protein quantification data — qp_tidy","text":"","code":"qp_tidy(x, ...)  # S3 method for class 'character' qp_tidy(x, ...)  # S3 method for class 'spectramax' qp_tidy(   x,   replicate_orientation = c(\"h\", \"v\"),   n_standards = 7,   n_replicates = 3,   wavelength = 562,   ... )  # S3 method for class 'synergy2' qp_tidy(   x,   replicate_orientation = c(\"h\", \"v\"),   n_standards = 7,   n_replicates = 3,   wavelength = 562,   ... )  # S3 method for class 'gp' qp_tidy(x, ...)  # Default S3 method qp_tidy(x, ...)"},{"path":"https://kaiaragaki.github.io/qp/reference/qp_tidy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read in and wrangle protein quantification data — qp_tidy","text":"x gp, data.frame/tibble, spectramax, character path raw SPECTRAmax .xls(x)/.txt ... Arguments passed relevant methods. replicate_orientation Character. Specified direction replicates lie, direction samples flow (perpendicular replicate_orientation). n_standards Numeric. number different concentrations standards. include replicates. n_replicates Numeric. number replicates per sample. wavelength Numeric. SPECTRAmax files objects, wavelength measured. Otherwise, ignored.","code":""},{"path":"https://kaiaragaki.github.io/qp/reference/qp_tidy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read in and wrangle protein quantification data — qp_tidy","text":"data.frame","code":""},{"path":"https://kaiaragaki.github.io/qp/reference/qp_tidy.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read in and wrangle protein quantification data — qp_tidy","text":"qp assumes read data spectramax file object, probably custom workflow mind - therefore, tidying minimal mostly focused checking validity.","code":""},{"path":"https://kaiaragaki.github.io/qp/reference/qp_tidy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read in and wrangle protein quantification data — qp_tidy","text":"","code":"data <- system.file(\"extdata\", \"absorbances.txt\", package = \"qp\") qp_tidy(data) #> # A tibble: 96 × 5 #>     .row  .col   .abs sample_type index #>    <int> <dbl>  <dbl> <fct>       <dbl> #>  1     1     1 0.0686 standard        1 #>  2     1     2 0.0717 standard        1 #>  3     1     3 0.0698 standard        1 #>  4     2     1 0.0825 standard        2 #>  5     2     2 0.0832 standard        2 #>  6     2     3 0.0835 standard        2 #>  7     3     1 0.102  standard        3 #>  8     3     2 0.100  standard        3 #>  9     3     3 0.102  standard        3 #> 10     4     1 0.132  standard        4 #> # ℹ 86 more rows"}]
