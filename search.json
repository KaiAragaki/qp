[{"path":"https://kaiaragaki.github.io/qp/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 qp authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://kaiaragaki.github.io/qp/articles/quantifying-protein-with-qp.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Quantifying protein with qp","text":"Micro BCA assay analysis easy straightforward. lab work, though, analysis typically repetitive. can analyze data programmatically speed automate analysis, remove human error, get reproducibility free along way. qp intends -fuss enough analyze routine runs flexible enough make analyzing hairier ones simple enough. vignette, ’ll start straightforward data set move challenging one show two different approaches analyzing protein quantification data using qp.","code":"library(qp)"},{"path":"https://kaiaragaki.github.io/qp/articles/quantifying-protein-with-qp.html","id":"routine-analysis","dir":"Articles","previous_headings":"","what":"Routine analysis","title":"Quantifying protein with qp","text":"standard qp workflow based protocol. Provided protocol followed, relatively parameters need changed default. easiest - common - way read data providing path SPECTRAmax file output. .txt files …creatively…formatted files ’ve come across. Fortunately, ’ve developed little package mop reads lab data like . used qp function provide character string. Typically perform experiments, know laid . data ’m providing, though, ’ll need show ’s laid can follow along set parameters way . plate looks:  samples laid triplicate, horizontally arranged replicates vertical bands wrap next three columns hits edge plate.  Furthermore, seven standards top left corner plate, ascending concentrations flow first column. samples follow. rest wells empty:  Since followed standard protocol, since told replicates arranged horizontally, analysis breeze: can plot standards samples simply, using qp_plot_standards:  can get summary concentrations using qp_summarize: can also calculate dilutions summary. default, use lowest concentration samples final volume 15uL:","code":"f <- system.file(\"extdata\", \"absorbances.txt\", package = \"qp\")  readLines(f) #>  [1] \"##BLOCKS= 2          \"                                                                                             #>  [2] \"Plate:\\tPlate#1\\t1.3\\tPlateFormat\\tEndpoint\\tAbsorbance\\tRaw\\tFALSE\\t1\\t\\t\\t\\t\\t\\t1\\t562\\t1\\t12\\t96\\t1\\t8\\tNone\\t\" #>  [3] \"\\tTemperature(\\xa1C)\\t1\\t2\\t3\\t4\\t5\\t6\\t7\\t8\\t9\\t10\\t11\\t12\\t\\t\"                                                   #>  [4] \"\\t37.00\\t0.0686\\t0.0717\\t0.0698\\t0.2415\\t0.228\\t0.2273\\t0.0475\\t0.0459\\t0.0485\\t0.0487\\t0.0474\\t0.0464\\t\\t\"        #>  [5] \"\\t\\t0.0825\\t0.0832\\t0.0835\\t0.183\\t0.1856\\t0.1753\\t0.0487\\t0.0464\\t0.048\\t0.0465\\t0.0468\\t0.047\\t\\t\"               #>  [6] \"\\t\\t0.1023\\t0.1004\\t0.1017\\t0.2175\\t0.2137\\t0.2168\\t0.0475\\t0.0471\\t0.0475\\t0.047\\t0.0474\\t0.0472\\t\\t\"             #>  [7] \"\\t\\t0.1322\\t0.1324\\t0.1371\\t0.1241\\t0.1248\\t0.1213\\t0.0482\\t0.0475\\t0.0476\\t0.0477\\t0.0474\\t0.0479\\t\\t\"            #>  [8] \"\\t\\t0.1955\\t0.199\\t0.1938\\t0.0478\\t0.0455\\t0.0508\\t0.046\\t0.0465\\t0.0479\\t0.0512\\t0.0477\\t0.0465\\t\\t\"              #>  [9] \"\\t\\t0.2963\\t0.2878\\t0.2974\\t0.046\\t0.0467\\t0.0462\\t0.0465\\t0.0477\\t0.0455\\t0.0456\\t0.0467\\t0.046\\t\\t\"              #> [10] \"\\t\\t0.4599\\t0.4662\\t0.4779\\t0.0472\\t0.0455\\t0.0464\\t0.0473\\t0.0464\\t0.0493\\t0.0451\\t0.0463\\t0.0466\\t\\t\"            #> [11] \"\\t\\t0.2617\\t0.2524\\t0.2584\\t0.0461\\t0.0463\\t0.0469\\t0.0448\\t0.0465\\t0.0464\\t0.0477\\t0.0472\\t0.0457\\t\\t\"            #> [12] \"\\t\\t\"                                                                                                              #> [13] \"~End\"                                                                                                              #> [14] \"Original Filename: Untitled   Date Last Saved: Unsaved\"                                                            #> [15] \"Copyright \\xa9 2003 Molecular Devices. All rights reserved.\" out <- qp(f, replicate_orientation = \"h\") #> Please wait. This will take ~10 seconds. qp_plot_standards(out) summary <- qp_summarize(out) summary #> # A tibble: 12 × 3 #>    .sample_name sample_type .mean_pred_conc #>    <chr>        <fct>                 <dbl> #>  1 Standard 1   standard           -0.00623 #>  2 Standard 2   standard            0.102   #>  3 Standard 3   standard            0.258   #>  4 Standard 4   standard            0.520   #>  5 Standard 5   standard            1.08    #>  6 Standard 6   standard            2.06    #>  7 Standard 7   standard            3.76    #>  8 1            unknown             1.71    #>  9 2            unknown             1.39    #> 10 3            unknown             0.989   #> 11 4            unknown             1.30    #> 12 5            unknown             0.451 summary |> qp_dilute() #> `target_conc` is missing, using lowest sample concentration #> # A tibble: 12 × 5 #>    .sample_name sample_type .mean_pred_conc sample_to_add  add_to #>    <chr>        <fct>                 <dbl>         <dbl>   <dbl> #>  1 Standard 1   standard           -0.00623      -1088    1103    #>  2 Standard 2   standard            0.102           66.2   -51.2  #>  3 Standard 3   standard            0.258           26.2   -11.2  #>  4 Standard 4   standard            0.520           13.0     1.98 #>  5 Standard 5   standard            1.08             6.24    8.76 #>  6 Standard 6   standard            2.06             3.28   11.7  #>  7 Standard 7   standard            3.76             1.8    13.2  #>  8 1            unknown             1.71             3.97   11.0  #>  9 2            unknown             1.39             4.85   10.1  #> 10 3            unknown             0.989            6.85    8.15 #> 11 4            unknown             1.30             5.23    9.77 #> 12 5            unknown             0.451           15       0"},{"path":"https://kaiaragaki.github.io/qp/articles/quantifying-protein-with-qp.html","id":"when-things-go-wrong","dir":"Articles","previous_headings":"","what":"When things go wrong","title":"Quantifying protein with qp","text":"Occasionally, experiment won’t go perfectly - maybe mixed order standards, can’t run samples technical replicates. case, can run functions qp runs individually, maybe little data munging steps. functions depend previous function run. See following hierarchy see functions depend :","code":""},{"path":"https://kaiaragaki.github.io/qp/articles/quantifying-protein-with-qp.html","id":"reading-in-the-data","dir":"Articles","previous_headings":"When things go wrong","what":"Reading in the data","title":"Quantifying protein with qp","text":"couple ways going . Depending borked plate , straightforward way may create data.frame columns sample_type (contain standard unknown), index (denotes standard sample number), .abs (absorbances - hopefully necessarily - 562nm): Admittedly, destroy whole ‘reproducibility’ aspect . Another way going via gplate can extract gp spectramax object via: can carve rectangular sections using gplate::gp_excise:","code":"standards <- data.frame(   sample_type = \"standard\",   index = rep(1:7, each = 2),   abs = c(0.071, 0.079, 0.08, 0.082,           0.1, 0.099, 0.15, 0.147,           0.22, 0.215, 0.50, 0.48, 0.78, 0.79)) unknowns <- data.frame(sample_type = \"unknown\", index = 1, abs = 0.25) data <- rbind(standards, unknowns) data #>    sample_type index   abs #> 1     standard     1 0.071 #> 2     standard     1 0.079 #> 3     standard     2 0.080 #> 4     standard     2 0.082 #> 5     standard     3 0.100 #> 6     standard     3 0.099 #> 7     standard     4 0.150 #> 8     standard     4 0.147 #> 9     standard     5 0.220 #> 10    standard     5 0.215 #> 11    standard     6 0.500 #> 12    standard     6 0.480 #> 13    standard     7 0.780 #> 14    standard     7 0.790 #> 15     unknown     1 0.250 library(mop) f <- system.file(\"extdata\", \"absorbances.txt\", package = \"qp\") spectramax <- read_spectramax(f) #> Please wait. This will take ~10 seconds. spectramax #> <spectramax[5]> #> [[1]] #> [[1]]$data #>  #>                 12 #>    ________________________ #>   | ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ #>   | ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ #>   | ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ #>   | ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ #> 8 | ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ #>   | ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ #>   | ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ #>   | ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ #>  #>  #> Start corner: tl #> Plate dimensions: 8 x 12 #>  #> [[1]]$type #> [1] \"Plate\" #>  #> [[1]]$wavelengths #> [1] \"562\" #>  #>  #> # Wavelengths: 562  #> # Is tidy: TRUE  #> # Date: 2023-10-28 # I know it's ugly syntax - I'll work on it. Later. gp <- spectramax$data[[1]]$data gp #>  #>                 12 #>    ________________________ #>   | ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ #>   | ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ #>   | ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ #>   | ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ #> 8 | ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ #>   | ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ #>   | ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ #>   | ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ #>  #>  #> Start corner: tl #> Plate dimensions: 8 x 12 library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union library(gplate) standards <- gp |>   gp_excise(top = 1, left = 1, bottom = 7, right = 2) |>   gp_serve() |>   mutate(     sample_type = \"standard\",     index = rep(1:7, each = 2)   )  samples <- gp |>   gp_excise(top = 1, left = 4, bottom = 1, right = 4) |>   gp_serve() |>   mutate(     sample_type = \"unknown\",     index = 1   )    data <- rbind(standards, samples) |>   rename(.abs = nm562)  data #> # A tibble: 15 × 5 #>     .row  .col   .abs sample_type index #>    <int> <int>  <dbl> <chr>       <dbl> #>  1     1     1 0.0686 standard        1 #>  2     1     2 0.0717 standard        1 #>  3     2     1 0.0825 standard        2 #>  4     2     2 0.0832 standard        2 #>  5     3     1 0.102  standard        3 #>  6     3     2 0.100  standard        3 #>  7     4     1 0.132  standard        4 #>  8     4     2 0.132  standard        4 #>  9     5     1 0.196  standard        5 #> 10     5     2 0.199  standard        5 #> 11     6     1 0.296  standard        6 #> 12     6     2 0.288  standard        6 #> 13     7     1 0.460  standard        7 #> 14     7     2 0.466  standard        7 #> 15     1     1 0.242  unknown         1"},{"path":"https://kaiaragaki.github.io/qp/articles/quantifying-protein-with-qp.html","id":"adding-standard-concentrations","dir":"Articles","previous_headings":"When things go wrong","what":"Adding standard concentrations","title":"Quantifying protein with qp","text":"Suppose accidentally made highest standard twice concentrated. ’s simple fix. Instead using standard standards: can set : use argument qp_add_std_conc: can specify strangely want:","code":"c(0, 2^((2:7) - 5)) #> [1] 0.000 0.125 0.250 0.500 1.000 2.000 4.000 c(0, 2^((2:6) - 5), 8) #> [1] 0.000 0.125 0.250 0.500 1.000 2.000 8.000 qp_add_std_conc(data, c(0, 2^((2:6) - 5), 8)) #> # A tibble: 15 × 6 #>     .row  .col   .abs sample_type index  .conc #>    <int> <int>  <dbl> <chr>       <dbl>  <dbl> #>  1     1     1 0.0686 standard        1  0     #>  2     1     2 0.0717 standard        1  0     #>  3     2     1 0.0825 standard        2  0.125 #>  4     2     2 0.0832 standard        2  0.125 #>  5     3     1 0.102  standard        3  0.25  #>  6     3     2 0.100  standard        3  0.25  #>  7     4     1 0.132  standard        4  0.5   #>  8     4     2 0.132  standard        4  0.5   #>  9     5     1 0.196  standard        5  1     #> 10     5     2 0.199  standard        5  1     #> 11     6     1 0.296  standard        6  2     #> 12     6     2 0.288  standard        6  2     #> 13     7     1 0.460  standard        7  8     #> 14     7     2 0.466  standard        7  8     #> 15     1     1 0.242  unknown         1 NA qp_add_std_conc(data, c(1, 7, 26, 0.4, 2, 1, 1)) #> # A tibble: 15 × 6 #>     .row  .col   .abs sample_type index .conc #>    <int> <int>  <dbl> <chr>       <dbl> <dbl> #>  1     1     1 0.0686 standard        1   1   #>  2     1     2 0.0717 standard        1   1   #>  3     2     1 0.0825 standard        2   7   #>  4     2     2 0.0832 standard        2   7   #>  5     3     1 0.102  standard        3  26   #>  6     3     2 0.100  standard        3  26   #>  7     4     1 0.132  standard        4   0.4 #>  8     4     2 0.132  standard        4   0.4 #>  9     5     1 0.196  standard        5   2   #> 10     5     2 0.199  standard        5   2   #> 11     6     1 0.296  standard        6   1   #> 12     6     2 0.288  standard        6   1   #> 13     7     1 0.460  standard        7   1   #> 14     7     2 0.466  standard        7   1   #> 15     1     1 0.242  unknown         1  NA"},{"path":"https://kaiaragaki.github.io/qp/articles/quantifying-protein-with-qp.html","id":"calculating-absorbance-means","dir":"Articles","previous_headings":"When things go wrong","what":"Calculating absorbance means","title":"Quantifying protein with qp","text":"point - either calculating standard concentrations - ’ll need calculate means absorbances. Excel based format, might manually remove outliers - counts ‘outlier’ somewhat arbitrary setting. can optionally remove outliers systematic way qp: Something outlier 3 standard deviations away mean others. might mark things outliers might (perhaps two samples just ultra close ), downstream effect outliers truly much different others.","code":"some_abs <- absorbances[c(1:5, 21:26),] some_abs |>    qp_calc_abs_mean(ignore_outliers = \"none\") #> # A tibble: 11 × 7 #>     .row  .col   .abs sample_type index .is_outlier  .mean #>    <int> <dbl>  <dbl> <fct>       <dbl> <lgl>        <dbl> #>  1     1     1 0.0707 standard        1 NA          0.0736 #>  2     2     1 0.0786 standard        1 NA          0.0736 #>  3     3     1 0.0714 standard        1 NA          0.0736 #>  4     1     2 0.0795 standard        2 NA          0.0797 #>  5     2     2 0.0799 standard        2 NA          0.0797 #>  6     3     7 0.792  standard        7 NA          0.792  #>  7     1     8 0.456  unknown         1 NA          0.457  #>  8     2     8 0.459  unknown         1 NA          0.457  #>  9     3     8 0.455  unknown         1 NA          0.457  #> 10     1     9 0.446  unknown         2 NA          0.444  #> 11     2     9 0.441  unknown         2 NA          0.444 some_abs |>    qp_calc_abs_mean(ignore_outliers = \"standards\") #> # A tibble: 11 × 7 #>     .row  .col   .abs sample_type index .is_outlier  .mean #>    <int> <dbl>  <dbl> <fct>       <dbl> <lgl>        <dbl> #>  1     1     1 0.0707 standard        1 FALSE       0.0710 #>  2     2     1 0.0786 standard        1 TRUE        0.0710 #>  3     3     1 0.0714 standard        1 FALSE       0.0710 #>  4     1     2 0.0795 standard        2 FALSE       0.0797 #>  5     2     2 0.0799 standard        2 FALSE       0.0797 #>  6     3     7 0.792  standard        7 FALSE       0.792  #>  7     1     8 0.456  unknown         1 NA          0.457  #>  8     2     8 0.459  unknown         1 NA          0.457  #>  9     3     8 0.455  unknown         1 NA          0.457  #> 10     1     9 0.446  unknown         2 NA          0.444  #> 11     2     9 0.441  unknown         2 NA          0.444 some_abs |>    qp_calc_abs_mean(ignore_outliers = \"samples\") #> # A tibble: 11 × 7 #>     .row  .col   .abs sample_type index .is_outlier  .mean #>    <int> <dbl>  <dbl> <fct>       <dbl> <lgl>        <dbl> #>  1     1     1 0.0707 standard        1 NA          0.0736 #>  2     2     1 0.0786 standard        1 NA          0.0736 #>  3     3     1 0.0714 standard        1 NA          0.0736 #>  4     1     2 0.0795 standard        2 NA          0.0797 #>  5     2     2 0.0799 standard        2 NA          0.0797 #>  6     3     7 0.792  standard        7 NA          0.792  #>  7     1     8 0.456  unknown         1 FALSE       0.455  #>  8     2     8 0.459  unknown         1 TRUE        0.455  #>  9     3     8 0.455  unknown         1 FALSE       0.455  #> 10     1     9 0.446  unknown         2 FALSE       0.444  #> 11     2     9 0.441  unknown         2 FALSE       0.444 some_abs |>    qp_calc_abs_mean(ignore_outliers = \"all\") #> # A tibble: 11 × 7 #>     .row  .col   .abs sample_type index .is_outlier  .mean #>    <int> <dbl>  <dbl> <fct>       <dbl> <lgl>        <dbl> #>  1     1     1 0.0707 standard        1 FALSE       0.0710 #>  2     2     1 0.0786 standard        1 TRUE        0.0710 #>  3     3     1 0.0714 standard        1 FALSE       0.0710 #>  4     1     2 0.0795 standard        2 FALSE       0.0797 #>  5     2     2 0.0799 standard        2 FALSE       0.0797 #>  6     3     7 0.792  standard        7 FALSE       0.792  #>  7     1     8 0.456  unknown         1 FALSE       0.455  #>  8     2     8 0.459  unknown         1 TRUE        0.455  #>  9     3     8 0.455  unknown         1 FALSE       0.455  #> 10     1     9 0.446  unknown         2 FALSE       0.444  #> 11     2     9 0.441  unknown         2 FALSE       0.444"},{"path":"https://kaiaragaki.github.io/qp/articles/quantifying-protein-with-qp.html","id":"fitting-a-model","dir":"Articles","previous_headings":"When things go wrong","what":"Fitting a model","title":"Quantifying protein with qp","text":"steps completed, can fit simple linear model:","code":"out <- absorbances |>   qp_add_std_conc() |> # all values are defaults   qp_calc_abs_mean() |>   qp_fit() #> Warning: `sample_type` contains values other than `standard` and `unknown` #> ! These values may be ignored downstream! #> Did not find column `.log2_abs`, calculating.  out #> $fit #>  #> Call: #> stats::lm(formula = .log2_conc ~ .log2_abs, data = fit_data) #>  #> Coefficients: #> (Intercept)    .log2_abs   #>       2.378        0.850   #>  #>  #> $qp #> # A tibble: 88 × 9 #>     .row  .col   .abs sample_type index .conc .is_outlier  .mean .log2_abs #>    <int> <dbl>  <dbl> <fct>       <dbl> <dbl> <lgl>        <dbl>     <dbl> #>  1     1     1 0.0707 standard        1 0     FALSE       0.0710     -3.82 #>  2     2     1 0.0786 standard        1 0     TRUE        0.0710     -3.67 #>  3     3     1 0.0714 standard        1 0     FALSE       0.0710     -3.81 #>  4     1     2 0.0795 standard        2 0.125 FALSE       0.0800     -3.65 #>  5     2     2 0.0799 standard        2 0.125 FALSE       0.0800     -3.65 #>  6     3     2 0.0805 standard        2 0.125 FALSE       0.0800     -3.63 #>  7     1     3 0.0999 standard        3 0.25  FALSE       0.0977     -3.32 #>  8     2     3 0.0955 standard        3 0.25  FALSE       0.0977     -3.39 #>  9     3     3 0.0976 standard        3 0.25  FALSE       0.0977     -3.36 #> 10     1     4 0.151  standard        4 0.5   TRUE        0.148      -2.72 #> # ℹ 78 more rows"},{"path":"https://kaiaragaki.github.io/qp/articles/quantifying-protein-with-qp.html","id":"predicting-concentrations","dir":"Articles","previous_headings":"When things go wrong","what":"Predicting concentrations","title":"Quantifying protein with qp","text":"","code":"conc <- qp_calc_conc(out) conc #> $fit #>  #> Call: #> stats::lm(formula = .log2_conc ~ .log2_abs, data = fit_data) #>  #> Coefficients: #> (Intercept)    .log2_abs   #>       2.378        0.850   #>  #>  #> $qp #> # A tibble: 88 × 12 #>     .row  .col   .abs sample_type index .conc .is_outlier  .mean .log2_abs #>    <int> <dbl>  <dbl> <fct>       <dbl> <dbl> <lgl>        <dbl>     <dbl> #>  1     1     1 0.0707 standard        1 0     FALSE       0.0710     -3.82 #>  2     2     1 0.0786 standard        1 0     TRUE        0.0710     -3.67 #>  3     3     1 0.0714 standard        1 0     FALSE       0.0710     -3.81 #>  4     1     2 0.0795 standard        2 0.125 FALSE       0.0800     -3.65 #>  5     2     2 0.0799 standard        2 0.125 FALSE       0.0800     -3.65 #>  6     3     2 0.0805 standard        2 0.125 FALSE       0.0800     -3.63 #>  7     1     3 0.0999 standard        3 0.25  FALSE       0.0977     -3.32 #>  8     2     3 0.0955 standard        3 0.25  FALSE       0.0977     -3.39 #>  9     3     3 0.0976 standard        3 0.25  FALSE       0.0977     -3.36 #> 10     1     4 0.151  standard        4 0.5   TRUE        0.148      -2.72 #> # ℹ 78 more rows #> # ℹ 3 more variables: .pred <dbl>, .pred_conc <dbl>, .pred_conc_mean <dbl>"},{"path":"https://kaiaragaki.github.io/qp/articles/quantifying-protein-with-qp.html","id":"removing-empty-wells","dir":"Articles","previous_headings":"When things go wrong","what":"Removing empty wells","title":"Quantifying protein with qp","text":"Samples predicted concentration lower 0 can removed easily using qp_remove_empty: Note typically won’t remove wells BCA solution sample.","code":"conc$qp |> tail() #> # A tibble: 6 × 12 #>    .row  .col   .abs sample_type index .conc .is_outlier  .mean .log2_abs .pred #>   <int> <dbl>  <dbl> <fct>       <dbl> <dbl> <lgl>        <dbl>     <dbl> <dbl> #> 1     7     6 0.048  unknown        NA    NA FALSE       0.0485     -4.38 -1.35 #> 2     8     6 0.0469 unknown        NA    NA FALSE       0.0485     -4.41 -1.37 #> 3     7     7 0.0499 unknown        NA    NA FALSE       0.0485     -4.32 -1.30 #> 4     8     7 0.0483 unknown        NA    NA FALSE       0.0485     -4.37 -1.34 #> 5     7     8 0.0485 unknown        NA    NA FALSE       0.0485     -4.37 -1.33 #> 6     8     8 0.0487 unknown        NA    NA FALSE       0.0485     -4.36 -1.33 #> # ℹ 2 more variables: .pred_conc <dbl>, .pred_conc_mean <dbl> no_zero <- qp_remove_empty(conc) no_zero$qp |> tail() #> # A tibble: 6 × 12 #>    .row  .col  .abs sample_type index .conc .is_outlier .mean .log2_abs .pred #>   <int> <dbl> <dbl> <fct>       <dbl> <dbl> <lgl>       <dbl>     <dbl> <dbl> #> 1     4     2 0.379 unknown         7    NA FALSE       0.378     -1.40 1.19  #> 2     5     2 0.370 unknown         7    NA TRUE        0.378     -1.44 1.16  #> 3     6     2 0.376 unknown         7    NA FALSE       0.378     -1.41 1.18  #> 4     4     3 0.228 unknown         8    NA TRUE        0.218     -2.13 0.565 #> 5     5     3 0.217 unknown         8    NA FALSE       0.218     -2.20 0.504 #> 6     6     3 0.220 unknown         8    NA FALSE       0.218     -2.19 0.520 #> # ℹ 2 more variables: .pred_conc <dbl>, .pred_conc_mean <dbl>"},{"path":"https://kaiaragaki.github.io/qp/articles/quantifying-protein-with-qp.html","id":"adding-sample-names","dir":"Articles","previous_headings":"When things go wrong","what":"Adding sample names","title":"Quantifying protein with qp","text":"point, can add sample names data - index gets sample name.","code":"with_names <- no_zero |> qp_add_names(paste0(\"my_sample_\", letters[1:8])) with_names$qp |> tail() #> # A tibble: 6 × 13 #>    .row  .col  .abs sample_type index .conc .is_outlier .mean .log2_abs .pred #>   <int> <dbl> <dbl> <fct>       <dbl> <dbl> <lgl>       <dbl>     <dbl> <dbl> #> 1     4     2 0.379 unknown         7    NA FALSE       0.378     -1.40 1.19  #> 2     5     2 0.370 unknown         7    NA TRUE        0.378     -1.44 1.16  #> 3     6     2 0.376 unknown         7    NA FALSE       0.378     -1.41 1.18  #> 4     4     3 0.228 unknown         8    NA TRUE        0.218     -2.13 0.565 #> 5     5     3 0.217 unknown         8    NA FALSE       0.218     -2.20 0.504 #> 6     6     3 0.220 unknown         8    NA FALSE       0.218     -2.19 0.520 #> # ℹ 3 more variables: .pred_conc <dbl>, .pred_conc_mean <dbl>, #> #   .sample_name <chr>"},{"path":"https://kaiaragaki.github.io/qp/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Kai Aragaki. Author, maintainer.","code":""},{"path":"https://kaiaragaki.github.io/qp/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Aragaki K (2023). qp: toolkit analyzing protein quantification results. R package version 0.0.0.9000, https://kaiaragaki.github.io/qp/.","code":"@Manual{,   title = {qp: A toolkit for analyzing protein quantification results},   author = {Kai Aragaki},   year = {2023},   note = {R package version 0.0.0.9000},   url = {https://kaiaragaki.github.io/qp/}, }"},{"path":"https://kaiaragaki.github.io/qp/index.html","id":"qp-","dir":"","previous_headings":"","what":"A toolkit for analyzing protein quantification results","title":"A toolkit for analyzing protein quantification results","text":"qp serves robust toolkit working MicroBCA assays. Currently, protocol ’s best served .","code":""},{"path":"https://kaiaragaki.github.io/qp/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"A toolkit for analyzing protein quantification results","text":"can install development version qp GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"KaiAragaki/qp\")"},{"path":"https://kaiaragaki.github.io/qp/index.html","id":"quickstart","dir":"","previous_headings":"","what":"Quickstart","title":"A toolkit for analyzing protein quantification results","text":"nicely formatted plate surprises (, follows protocol), really need plug qp let rip: , can things like add dilution calculations: make plots assess quality:","code":"library(qp) f <- system.file(\"extdata\", \"absorbances.txt\", package = \"qp\")  # Most of these arguments are defaults # I'm only writing them out so you can see what options you can set out <- qp(   f,   replicate_orientation = \"h\",   sample_names = c(\"here\", \"are\", \"my\", \"sample\", \"names\"),   remove_empty = TRUE,   ignore_outliers = \"all\",   standard_scale = c(0, 2^((2:7) - 5)),   n_replicates = 3,   wavelength = 562 ) #> Please wait. This will take ~10 seconds. summary <- qp_summarize(out)  qp_dilute(summary, target_vol = 15, remove_standards = TRUE) #> `target_conc` is missing, using lowest sample concentration #> # A tibble: 5 × 5 #>   .sample_name sample_type .mean_pred_conc sample_to_add add_to #>   <chr>        <fct>                 <dbl>         <dbl>  <dbl> #> 1 here         unknown               1.71           3.97  11.0  #> 2 are          unknown               1.39           4.85  10.1  #> 3 my           unknown               0.989          6.85   8.15 #> 4 sample       unknown               1.30           5.23   9.77 #> 5 names        unknown               0.451         15      0 qp_plot_standards(out)"},{"path":"https://kaiaragaki.github.io/qp/reference/qp.html","id":null,"dir":"Reference","previous_headings":"","what":"Quantify protein concentration from a MicroBCA assay — qp","title":"Quantify protein concentration from a MicroBCA assay — qp","text":"Quantify protein concentration MicroBCA assay","code":""},{"path":"https://kaiaragaki.github.io/qp/reference/qp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quantify protein concentration from a MicroBCA assay — qp","text":"","code":"qp(   x,   replicate_orientation = c(\"h\", \"v\"),   sample_names = NULL,   remove_empty = TRUE,   ignore_outliers = c(\"all\", \"samples\", \"standards\", \"none\"),   standard_scale = c(0, 2^((2:7) - 5)),   n_replicates = 3,   wavelength = 562 )"},{"path":"https://kaiaragaki.github.io/qp/reference/qp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quantify protein concentration from a MicroBCA assay — qp","text":"x spectramax, gp, data.frame object, path SPECTRAmax .xls(x)/.txt file. replicate_orientation Either 'h' 'v' - see Details. sample_names Character vector sample names. remove_empty wells less absorbance lowest standard dropped? ignore_outliers Character. group - samples standards - outliers detected removed? standard_scale Numeric. Known concentrations standards, order appear. n_replicates Numeric. number techinical replicates. wavelength Numeric. wavelength absorbance captured.","code":""},{"path":"https://kaiaragaki.github.io/qp/reference/qp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quantify protein concentration from a MicroBCA assay — qp","text":"tibble","code":""},{"path":"https://kaiaragaki.github.io/qp/reference/qp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Quantify protein concentration from a MicroBCA assay — qp","text":"x spectramax, standards must start upper left corner order dictated standard_scale. Whether left right top bottom can specified replicate_orientation. Note replicate_orientation specified direction REPLICATES lie, direction samples flow (perpendicular replicates). Note: replicate_orientation, n_replicates, wavelength silently ignored x spectramax path spectramax","code":""},{"path":"https://kaiaragaki.github.io/qp/reference/qp_add_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Add sample names — qp_add_names","title":"Add sample names — qp_add_names","text":"Add sample names","code":""},{"path":"https://kaiaragaki.github.io/qp/reference/qp_add_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add sample names — qp_add_names","text":"","code":"qp_add_names(x, ...)  # S3 method for list qp_add_names(x, sample_names = NULL, ...)  # S3 method for data.frame qp_add_names(x, sample_names = NULL, ...)"},{"path":"https://kaiaragaki.github.io/qp/reference/qp_add_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add sample names — qp_add_names","text":"x data.frame (list containing one) contains columns index (denotes sample number) sample_type, either \"unknown\" \"standard\". ... Unused sample_names Optional character vector. NULL, uses sample index. standard workflow, index order sample appears plate","code":""},{"path":"https://kaiaragaki.github.io/qp/reference/qp_add_std_conc.html","id":null,"dir":"Reference","previous_headings":"","what":"Add known concentrations of protein to standard samples — qp_add_std_conc","title":"Add known concentrations of protein to standard samples — qp_add_std_conc","text":"Add known concentrations protein standard samples","code":""},{"path":"https://kaiaragaki.github.io/qp/reference/qp_add_std_conc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add known concentrations of protein to standard samples — qp_add_std_conc","text":"","code":"qp_add_std_conc(x, standard_scale = c(0, 2^((2:7) - 5)), ...)  # S3 method for data.frame qp_add_std_conc(x, standard_scale = c(0, 2^((2:7) - 5)), ...)  # S3 method for list qp_add_std_conc(x, standard_scale = c(0, 2^((2:7) - 5)), ...)"},{"path":"https://kaiaragaki.github.io/qp/reference/qp_add_std_conc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add known concentrations of protein to standard samples — qp_add_std_conc","text":"x data.frame containing sample_type index columns. See details. standard_scale numeric vector giving concentrations standards. units arbitrary, determine units output concentrations.","code":""},{"path":"https://kaiaragaki.github.io/qp/reference/qp_add_std_conc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add known concentrations of protein to standard samples — qp_add_std_conc","text":"type x, .conc column","code":""},{"path":"https://kaiaragaki.github.io/qp/reference/qp_add_std_conc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add known concentrations of protein to standard samples — qp_add_std_conc","text":"Input expected two columns: sample_type: character vector denoting samples standards \"standard\". values considered unknowns. index: numeric column denoting sample number. Index 1 correspond first item standard_scale, 2 second, etc.","code":""},{"path":"https://kaiaragaki.github.io/qp/reference/qp_calc_abs_mean.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate absorbance means with optional outlier removal — qp_calc_abs_mean","title":"Calculate absorbance means with optional outlier removal — qp_calc_abs_mean","text":"Calculate absorbance means optional outlier removal","code":""},{"path":"https://kaiaragaki.github.io/qp/reference/qp_calc_abs_mean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate absorbance means with optional outlier removal — qp_calc_abs_mean","text":"","code":"qp_calc_abs_mean(x, ignore_outliers = c(\"all\", \"standards\", \"samples\", \"none\"))  # S3 method for data.frame qp_calc_abs_mean(x, ignore_outliers = c(\"all\", \"standards\", \"samples\", \"none\"))  # S3 method for list qp_calc_abs_mean(x, ignore_outliers = c(\"all\", \"standards\", \"samples\", \"none\"))"},{"path":"https://kaiaragaki.github.io/qp/reference/qp_calc_abs_mean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate absorbance means with optional outlier removal — qp_calc_abs_mean","text":"x data.frame list containing data.frame named qp. See details. ignore_outliers sample types outliers ignored mean calculations?","code":""},{"path":"https://kaiaragaki.github.io/qp/reference/qp_calc_abs_mean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate absorbance means with optional outlier removal — qp_calc_abs_mean","text":"tibble .is_outlier column .mean column","code":""},{"path":"https://kaiaragaki.github.io/qp/reference/qp_calc_abs_mean.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate absorbance means with optional outlier removal — qp_calc_abs_mean","text":"Input data.frame must contian following columns: sample_type. Character. Must contain values either \"standard\" \"unknown\" index. Numeric. Denotes sample number. .abs. Numeric. Contains absorbance values.","code":""},{"path":"https://kaiaragaki.github.io/qp/reference/qp_calc_conc.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict concentrations from standards fit — qp_calc_conc","title":"Predict concentrations from standards fit — qp_calc_conc","text":"Predict concentrations standards fit","code":""},{"path":"https://kaiaragaki.github.io/qp/reference/qp_calc_conc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict concentrations from standards fit — qp_calc_conc","text":"","code":"qp_calc_conc(x, ignore_outliers = TRUE, group_cols = c(\"sample_type\", \"index\"))"},{"path":"https://kaiaragaki.github.io/qp/reference/qp_calc_conc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict concentrations from standards fit — qp_calc_conc","text":"x list. See details. ignore_outliers Boolean. outliers considered calculating mean? See details. group_cols Character vector. Columns group taking mean.","code":""},{"path":"https://kaiaragaki.github.io/qp/reference/qp_calc_conc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict concentrations from standards fit — qp_calc_conc","text":"Returns list input fit data.frame, additional columns: .pred: predicted value provided model .pred_conc: .pred, transformed conc_transform .pred_conc_mean: mean .pred_conc, sans samples column .is_outlier == TRUE","code":""},{"path":"https://kaiaragaki.github.io/qp/reference/qp_calc_conc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Predict concentrations from standards fit — qp_calc_conc","text":"supplied list contain two items - fit, generated qp_fit, qp, data.frame. qp contain following: Columns used fit. Usually, .log2_conc .log2_abs columns group_cols ignore_outliers = TRUE, .is_outlier used supplied, created .","code":""},{"path":"https://kaiaragaki.github.io/qp/reference/qp_dilute.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate dilutions from predicted concentrations — qp_dilute","title":"Calculate dilutions from predicted concentrations — qp_dilute","text":"Calculate dilutions predicted concentrations","code":""},{"path":"https://kaiaragaki.github.io/qp/reference/qp_dilute.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate dilutions from predicted concentrations — qp_dilute","text":"","code":"qp_dilute(x, ...)  # S3 method for data.frame qp_dilute(   x,   target_conc = NULL,   target_vol = 15,   remove_standards = FALSE,   ... )  # S3 method for list qp_dilute(   x,   target_conc = NULL,   target_vol = 15,   remove_standards = FALSE,   ... )"},{"path":"https://kaiaragaki.github.io/qp/reference/qp_dilute.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate dilutions from predicted concentrations — qp_dilute","text":"x data.frame list containing data.frame named qp column named .pred_conc .mean_pred_conc. , favor .mean_pred_conc. target_conc Numeric vector. Target concentration (mg/mL) protein. length == 1, recycled. target_vol Target volume uL. length == 1, recycled.","code":""},{"path":"https://kaiaragaki.github.io/qp/reference/qp_dilute.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate dilutions from predicted concentrations — qp_dilute","text":"input, volumes lysate volumes diluent add.","code":""},{"path":"https://kaiaragaki.github.io/qp/reference/qp_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit an lm using standards absorbances — qp_fit","title":"Fit an lm using standards absorbances — qp_fit","text":"Fit lm using standards absorbances","code":""},{"path":"https://kaiaragaki.github.io/qp/reference/qp_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit an lm using standards absorbances — qp_fit","text":"","code":"qp_fit(x)  # S3 method for data.frame qp_fit(x)  # S3 method for list qp_fit(x)"},{"path":"https://kaiaragaki.github.io/qp/reference/qp_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit an lm using standards absorbances — qp_fit","text":"x data.frame list containing data.frame name qp. See details.","code":""},{"path":"https://kaiaragaki.github.io/qp/reference/qp_fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit an lm using standards absorbances — qp_fit","text":"list containing: fit, lm object fit formula .log2_conc ~ .log2_abs, fit using non-outlier standards qp, input data","code":""},{"path":"https://kaiaragaki.github.io/qp/reference/qp_fit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit an lm using standards absorbances — qp_fit","text":"supplied data.frame must following columns: sample_type. Character. 'standard', assumed sample .is_outlier. Boolean. TRUE, assumed outlier removed fitting. FALSE NA, used fitting. .conc. Numeric. Known concentration standard. .log2_abs. Numeric. log2 absorbances function creates new column .log2_conc, log2(.conc + 0.5)","code":""},{"path":"https://kaiaragaki.github.io/qp/reference/qp_plot_plate.html","id":null,"dir":"Reference","previous_headings":"","what":"View the absorbances of an analyzed qp as they were on the plate — qp_plot_plate","title":"View the absorbances of an analyzed qp as they were on the plate — qp_plot_plate","text":"View absorbances analyzed qp plate","code":""},{"path":"https://kaiaragaki.github.io/qp/reference/qp_plot_plate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"View the absorbances of an analyzed qp as they were on the plate — qp_plot_plate","text":"","code":"qp_plot_plate(x, size = 15)"},{"path":"https://kaiaragaki.github.io/qp/reference/qp_plot_plate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"View the absorbances of an analyzed qp as they were on the plate — qp_plot_plate","text":"x data.frame .row, .col, .abs columns","code":""},{"path":"https://kaiaragaki.github.io/qp/reference/qp_plot_plate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"View the absorbances of an analyzed qp as they were on the plate — qp_plot_plate","text":"ggplot","code":""},{"path":"https://kaiaragaki.github.io/qp/reference/qp_plot_plate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"View the absorbances of an analyzed qp as they were on the plate — qp_plot_plate","text":"","code":"qp_plot_plate(absorbances)"},{"path":"https://kaiaragaki.github.io/qp/reference/qp_plot_standards.html","id":null,"dir":"Reference","previous_headings":"","what":"View an absorbance/concentration plot — qp_plot_standards","title":"View an absorbance/concentration plot — qp_plot_standards","text":"View absorbance/concentration plot","code":""},{"path":"https://kaiaragaki.github.io/qp/reference/qp_plot_standards.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"View an absorbance/concentration plot — qp_plot_standards","text":"","code":"qp_plot_standards(x)"},{"path":"https://kaiaragaki.github.io/qp/reference/qp_plot_standards.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"View an absorbance/concentration plot — qp_plot_standards","text":"x output qp qp_calc_conc","code":""},{"path":"https://kaiaragaki.github.io/qp/reference/qp_plot_standards.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"View an absorbance/concentration plot — qp_plot_standards","text":"ggplot","code":""},{"path":"https://kaiaragaki.github.io/qp/reference/qp_plot_standards.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"View an absorbance/concentration plot — qp_plot_standards","text":"","code":"absorbances |>   qp() |>   qp_plot_standards() #> Warning: `sample_type` contains values other than `standard` and `unknown` #> ! These values may be ignored downstream! #> Warning: `sample_type` contains values other than `standard` and `unknown` #> ! These values may be ignored downstream!"},{"path":"https://kaiaragaki.github.io/qp/reference/qp_remove_empty.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove empty wells from data — qp_remove_empty","title":"Remove empty wells from data — qp_remove_empty","text":"Remove empty wells data","code":""},{"path":"https://kaiaragaki.github.io/qp/reference/qp_remove_empty.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove empty wells from data — qp_remove_empty","text":"","code":"qp_remove_empty(x)  # S3 method for data.frame qp_remove_empty(x)  # S3 method for list qp_remove_empty(x)"},{"path":"https://kaiaragaki.github.io/qp/reference/qp_remove_empty.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove empty wells from data — qp_remove_empty","text":"x data.frame list containing data.frame named qp containing columns .pred_conc sample_type. See details.","code":""},{"path":"https://kaiaragaki.github.io/qp/reference/qp_remove_empty.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove empty wells from data — qp_remove_empty","text":"input","code":""},{"path":"https://kaiaragaki.github.io/qp/reference/qp_remove_empty.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Remove empty wells from data — qp_remove_empty","text":"function keeps columns positive .pred_conc sample_type == \"standard\"","code":""},{"path":"https://kaiaragaki.github.io/qp/reference/qp_summarize.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize output from qp pipeline — qp_summarize","title":"Summarize output from qp pipeline — qp_summarize","text":"Summarize output qp pipeline","code":""},{"path":"https://kaiaragaki.github.io/qp/reference/qp_summarize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize output from qp pipeline — qp_summarize","text":"","code":"qp_summarize(x)  # S3 method for data.frame qp_summarize(x)  # S3 method for list qp_summarize(x)"},{"path":"https://kaiaragaki.github.io/qp/reference/qp_summarize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize output from qp pipeline — qp_summarize","text":"x data.frame list containing data.frame named qp","code":""},{"path":"https://kaiaragaki.github.io/qp/reference/qp_summarize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize output from qp pipeline — qp_summarize","text":"tibble sample name, sample_type, mean predicted concentration (.mean_pred_conc)","code":""},{"path":"https://kaiaragaki.github.io/qp/reference/qp_tidy.html","id":null,"dir":"Reference","previous_headings":"","what":"Read in and wrangle protein quantification data — qp_tidy","title":"Read in and wrangle protein quantification data — qp_tidy","text":"Read wrangle protein quantification data","code":""},{"path":"https://kaiaragaki.github.io/qp/reference/qp_tidy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read in and wrangle protein quantification data — qp_tidy","text":"","code":"qp_tidy(x, ...)  # S3 method for character qp_tidy(x, ...)  # S3 method for spectramax qp_tidy(   x,   replicate_orientation = c(\"h\", \"v\"),   n_standards = 7,   n_replicates = 3,   wavelength = 562,   ... )  # S3 method for gp qp_tidy(x, ...)  # S3 method for default qp_tidy(x, ...)"},{"path":"https://kaiaragaki.github.io/qp/reference/qp_tidy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read in and wrangle protein quantification data — qp_tidy","text":"x gp, data.frame/tibble, spectramax, character path raw SPECTRAmax .xls(x)/.txt ... Arguments passed relevant methods. replicate_orientation Character. Specified direction replicates lie, direction samples flow (perpendicular replicate_orientation). n_standards Numeric. number different concentrations standards. include replicates. n_replicates Numeric. number replicates per sample. wavelength Numeric. SPECTRAmax files objects, wavelength measured. Otherwise, ignored.","code":""},{"path":"https://kaiaragaki.github.io/qp/reference/qp_tidy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read in and wrangle protein quantification data — qp_tidy","text":"data.frame","code":""},{"path":"https://kaiaragaki.github.io/qp/reference/qp_tidy.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read in and wrangle protein quantification data — qp_tidy","text":"qp assumes read data spectramax file object, probably custom workflow mind - therefore, tidying minimal mostly focused checking validity.","code":""}]
